/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.qalens.corr.lang.core.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import kotlin.reflect.jvm.internal.impl.resolve.constants.LongValue;
import static com.qalens.corr.lang.core.psi.JrnElementTypes.*;
import static com.intellij.psi.TokenType.*;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Journey.flex</tt>
 */
class JourneyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TEXT_TEMPLATE = 2;
  public static final int IN_SCRIPLET = 4;
  public static final int IN_STRING = 6;
  public static final int IN_TEXT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\5\0\1\16"+
    "\1\17\1\16\2\20\1\21\3\20\1\21\71\20\1\22\1\20\1\23\1\0\1\24\1\25\2\0\16\26"+
    "\1\27\1\30\1\31\1\32\2\20\1\33\11\20\1\34\21\20\1\35\1\36\24\20\1\37\3\20"+
    "\1\21\1\40\1\37\4\20\1\0\1\41\4\26\1\42\1\43\1\0\3\20\2\44\3\0\1\26\1\45\5"+
    "\20\1\46\3\26\1\47\1\50\13\20\1\51\1\52\1\53\1\54\1\26\1\55\2\0\1\56\3\20"+
    "\3\26\1\57\12\20\1\60\1\26\1\61\1\0\1\26\1\62\3\20\1\46\1\63\1\16\2\20\1\60"+
    "\1\64\1\65\1\66\2\0\3\20\1\67\10\0\2\20\1\27\1\70\2\0\1\71\1\26\1\72\3\26"+
    "\1\73\6\20\1\74\2\26\1\75\1\20\1\76\1\26\1\37\1\20\1\77\1\100\1\101\2\20\1"+
    "\102\1\103\1\104\1\52\1\105\1\106\1\107\1\76\1\26\1\23\1\0\1\110\1\111\1\101"+
    "\2\20\1\102\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\26\1\121\1\0\1\110"+
    "\1\34\1\33\2\20\1\102\1\122\1\104\1\42\1\123\1\124\1\0\1\76\1\26\1\0\1\40"+
    "\1\110\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\120\1\107\1\76\1\26"+
    "\1\40\1\0\1\125\1\126\1\127\1\130\1\131\1\126\1\20\1\132\1\133\1\134\1\135"+
    "\1\0\1\120\1\26\2\0\1\136\1\27\1\102\2\20\1\102\1\20\1\137\1\140\1\134\1\141"+
    "\1\44\1\76\1\26\2\0\1\77\1\27\1\102\2\20\1\102\1\142\1\104\1\140\1\134\1\141"+
    "\1\143\1\76\1\26\1\144\1\0\1\110\1\27\1\102\4\20\1\145\1\140\1\146\1\147\1"+
    "\150\1\76\1\26\1\0\1\36\1\151\1\20\1\21\1\36\2\20\1\33\1\152\1\21\1\153\1"+
    "\154\1\26\1\120\1\26\1\155\1\0\1\37\5\20\1\156\1\45\1\157\1\160\1\26\1\161"+
    "\4\0\1\162\1\163\1\164\1\37\1\165\1\166\1\156\1\167\1\170\1\171\1\26\1\172"+
    "\4\0\1\124\2\0\1\161\1\26\1\161\1\173\1\174\1\20\1\37\3\20\1\24\1\41\1\26"+
    "\1\140\1\175\1\26\1\41\3\26\1\176\1\177\7\0\5\20\1\46\1\26\1\200\1\26\1\161"+
    "\1\60\1\201\1\202\1\203\1\204\1\20\1\205\1\206\1\26\1\171\4\20\1\34\1\207"+
    "\5\20\1\210\51\20\1\127\1\21\1\127\5\20\1\127\4\20\1\127\1\21\1\127\1\20\1"+
    "\21\7\20\1\127\10\20\1\211\1\0\1\41\1\161\1\0\2\20\2\0\12\20\2\70\1\37\114"+
    "\20\1\100\2\20\1\37\2\20\1\44\11\20\1\126\1\20\1\124\1\20\1\27\1\212\1\0\2"+
    "\20\1\212\1\0\2\20\1\213\1\0\1\20\1\27\1\214\1\0\6\20\1\215\3\26\1\216\1\217"+
    "\1\26\1\161\3\0\1\220\1\26\1\161\13\20\1\0\5\20\1\221\10\20\1\70\1\0\3\20"+
    "\1\21\1\26\1\222\1\26\1\222\1\120\1\26\3\20\1\70\1\24\1\0\5\20\1\223\3\20"+
    "\1\23\1\26\1\45\4\0\2\20\1\157\1\222\6\20\1\175\1\160\3\26\1\52\1\26\1\161"+
    "\1\26\1\161\1\150\1\0\1\26\1\171\10\0\1\224\5\20\1\215\1\26\1\224\1\223\1"+
    "\26\1\161\1\0\1\225\1\222\1\0\1\226\3\20\1\75\1\203\1\26\1\62\4\20\1\60\1"+
    "\26\1\222\1\0\4\20\1\215\2\26\1\0\1\26\1\227\1\26\1\62\3\20\1\70\1\20\1\124"+
    "\10\0\1\230\2\26\1\231\1\232\1\161\30\20\6\26\1\171\1\225\42\20\2\70\4\20"+
    "\2\70\1\20\1\233\3\20\1\70\6\20\1\27\1\170\1\234\1\24\1\235\1\223\1\20\1\24"+
    "\1\234\1\24\7\0\1\106\1\236\1\0\1\237\3\0\1\40\1\150\2\0\1\20\1\24\6\0\1\26"+
    "\1\176\1\240\1\26\1\236\1\0\1\241\1\36\1\152\1\70\1\25\1\102\1\20\1\242\1"+
    "\243\1\244\2\0\5\20\1\124\116\0\5\20\1\21\5\20\1\21\20\20\1\24\1\245\1\246"+
    "\1\0\4\20\1\34\1\207\7\20\1\150\1\0\1\106\2\20\1\21\1\0\10\21\4\26\1\243\3"+
    "\0\1\37\1\205\1\247\1\24\1\37\11\20\1\21\1\250\1\37\12\20\1\210\1\243\4\20"+
    "\1\70\1\37\12\20\1\21\2\0\3\20\1\44\6\0\170\20\1\70\11\0\72\20\1\70\5\0\21"+
    "\20\1\24\10\0\5\20\1\70\41\20\1\24\2\20\1\26\1\246\2\0\5\20\1\157\1\71\1\251"+
    "\3\20\1\60\12\20\1\161\3\0\1\150\1\20\1\36\14\20\1\101\3\20\1\21\1\20\7\0"+
    "\1\150\1\20\1\252\1\253\2\20\1\46\3\0\6\20\1\223\1\0\1\62\5\20\1\215\1\26"+
    "\1\171\1\0\1\26\1\161\2\26\1\62\1\254\1\26\1\62\2\20\1\60\1\171\2\20\1\157"+
    "\1\26\1\222\1\0\3\20\1\24\1\73\5\20\1\46\1\26\1\236\1\150\1\26\1\161\1\255"+
    "\1\20\1\26\1\256\5\20\1\75\1\160\1\0\1\253\1\257\1\26\1\161\2\20\1\21\1\260"+
    "\6\20\1\202\1\261\1\221\2\0\1\262\1\20\1\46\1\263\1\0\3\264\1\0\2\21\5\20"+
    "\1\210\1\70\1\0\16\20\1\46\1\265\1\26\1\161\64\20\1\223\1\0\2\20\1\21\1\266"+
    "\5\20\1\223\40\0\55\20\1\70\15\20\1\23\4\0\1\21\1\0\1\266\1\267\1\20\1\102"+
    "\1\21\1\170\1\270\15\20\1\23\3\0\1\266\20\20\1\70\1\164\32\20\1\70\2\0\10"+
    "\20\1\36\6\20\5\0\1\20\1\23\2\26\2\0\2\26\1\271\2\0\1\272\4\0\1\273\1\233"+
    "\17\20\1\24\2\0\1\26\1\161\1\37\2\20\1\274\1\37\2\20\1\44\1\275\6\20\1\60"+
    "\3\20\1\21\3\36\1\276\4\0\1\20\1\142\2\20\1\21\2\20\1\277\1\20\1\70\1\20\1"+
    "\70\4\0\17\20\1\44\10\0\6\20\1\24\20\0\1\300\20\0\3\20\1\24\6\20\1\124\1\0"+
    "\1\236\3\0\4\20\2\0\3\20\1\44\4\20\1\60\1\45\3\20\1\70\4\20\1\223\1\20\1\247"+
    "\5\0\23\20\1\70\1\26\1\161\4\20\1\223\4\20\1\223\5\20\1\0\6\20\1\223\23\0"+
    "\46\20\1\21\1\0\2\20\1\70\1\0\1\20\23\0\1\70\1\102\4\20\1\34\1\301\2\20\1"+
    "\70\1\0\2\20\1\21\1\0\3\20\1\21\10\0\2\20\1\302\1\0\2\20\1\70\1\0\3\20\1\23"+
    "\10\0\7\20\1\275\10\0\1\303\1\71\1\142\1\37\2\20\1\223\1\114\4\0\3\20\1\24"+
    "\3\20\1\24\4\0\1\20\1\37\2\20\1\304\3\0\6\20\1\70\1\0\2\20\1\70\1\0\2\20\1"+
    "\44\1\0\2\20\1\23\15\0\11\20\1\124\6\0\6\20\1\44\1\0\6\20\1\44\41\0\1\226"+
    "\6\20\1\26\1\160\3\0\1\120\1\26\1\0\1\106\1\226\5\20\1\26\1\45\2\0\3\20\1"+
    "\124\1\26\1\161\1\226\3\20\1\157\1\26\1\140\1\26\2\0\4\20\1\305\1\0\1\226"+
    "\5\20\1\46\1\26\1\306\1\307\1\26\1\310\4\0\2\20\1\33\2\20\1\215\1\26\1\177"+
    "\10\0\1\21\1\311\1\20\1\34\1\20\1\124\5\20\1\157\1\26\1\45\1\26\1\161\1\136"+
    "\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\135\1\243\1\76\2\176\21\0"+
    "\6\20\1\175\1\26\1\200\1\44\1\26\1\161\4\0\6\20\2\26\1\312\1\0\1\26\1\161"+
    "\24\0\5\20\1\157\1\171\1\26\1\236\2\0\1\257\4\0\6\20\2\26\1\313\1\0\1\26\1"+
    "\161\4\0\5\20\1\46\1\26\1\0\1\26\1\161\6\0\3\20\1\314\1\26\1\222\1\26\1\161"+
    "\54\0\10\20\1\26\1\161\1\0\1\150\70\0\7\20\1\124\40\0\1\20\1\102\3\20\1\157"+
    "\1\160\1\26\1\124\1\0\1\26\1\161\2\0\1\36\3\20\1\315\2\26\1\41\1\160\51\0"+
    "\63\20\1\23\14\0\15\20\1\21\2\0\30\20\1\223\27\0\5\20\1\21\72\0\10\20\1\21"+
    "\67\0\7\20\1\124\3\20\1\21\1\26\1\161\14\0\3\20\1\70\1\176\1\0\6\20\1\160"+
    "\1\0\1\223\1\0\1\26\1\161\1\266\2\20\1\243\2\20\56\0\10\20\1\24\1\0\1\75\4"+
    "\26\1\160\1\0\1\106\1\226\1\20\10\0\1\124\3\0\75\20\1\24\2\0\36\20\1\44\41"+
    "\0\1\23\77\0\15\20\1\44\1\20\1\24\1\20\1\124\1\20\1\316\130\0\1\272\1\317"+
    "\1\45\1\225\1\320\1\222\3\0\1\321\22\0\1\307\67\0\12\20\1\27\10\20\1\27\1"+
    "\322\1\323\1\20\1\324\1\142\7\20\1\34\1\325\2\27\3\20\1\326\1\170\1\36\1\102"+
    "\51\20\1\70\3\20\1\102\2\20\1\210\3\20\1\210\2\20\1\27\3\20\1\27\2\20\1\21"+
    "\3\20\1\21\3\20\1\102\3\20\1\102\2\20\1\210\1\327\14\26\1\160\1\225\5\26\1"+
    "\176\1\300\1\0\1\237\2\0\1\225\1\41\1\26\52\0\1\160\2\26\1\330\1\331\1\45"+
    "\72\0\30\20\1\24\1\0\1\160\5\0\10\20\1\215\1\45\1\26\1\161\24\0\1\142\3\20"+
    "\1\162\1\37\1\210\1\332\1\241\1\333\1\162\1\233\1\162\2\210\1\117\1\20\1\33"+
    "\1\20\1\223\1\334\1\33\1\20\1\223\50\0\32\20\1\21\5\0\106\20\1\24\1\0\33\20"+
    "\1\70\120\20\1\23\53\0\3\20\1\70\134\0\36\26\2\0");

  /* The ZZ_CMAP_A table has 1768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\0\1\1\2\0\1\2\1\0\1\10\2\0\1\31\2\0\1\34\1\3\2\0\1\57\1\13"+
    "\1\14\1\0\1\12\11\11\1\35\1\36\1\30\1\0\1\63\2\0\1\46\1\56\2\5\1\45\1\42\2"+
    "\5\1\55\2\5\1\47\3\5\1\52\1\5\1\43\1\50\1\41\1\44\5\5\1\0\1\4\2\0\1\5\1\7"+
    "\1\24\1\25\1\60\1\62\1\26\1\22\1\51\1\5\1\17\2\5\1\23\1\61\1\20\1\53\1\15"+
    "\1\5\1\16\1\40\1\21\1\37\1\54\1\5\1\27\2\5\1\32\1\0\1\33\4\0\1\5\12\0\1\5"+
    "\1\0\1\6\17\5\1\0\2\5\4\0\4\5\6\0\5\5\7\0\1\5\1\0\1\5\1\0\10\6\5\5\1\0\2\5"+
    "\3\0\3\5\1\0\1\5\6\0\1\5\1\6\3\5\1\0\1\5\1\0\4\5\1\0\13\5\1\0\3\5\1\0\5\6"+
    "\2\0\6\5\1\0\7\5\1\0\1\5\7\0\15\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\3\5\5\0"+
    "\3\6\5\0\3\5\7\6\4\0\2\5\1\6\13\5\1\0\1\5\7\6\2\0\6\6\2\5\2\6\1\0\4\6\2\5"+
    "\2\6\3\5\2\0\2\5\1\6\6\5\3\6\2\0\11\5\3\6\1\5\6\0\2\6\6\5\4\6\2\5\2\0\2\6"+
    "\1\5\11\6\1\5\3\6\1\5\5\6\2\0\1\5\3\6\4\0\6\5\6\0\6\6\1\0\11\6\6\5\3\6\1\5"+
    "\2\6\1\5\7\6\2\5\2\6\2\0\2\6\1\5\3\6\1\0\10\5\2\0\2\5\2\0\6\5\1\0\7\5\1\0"+
    "\1\5\3\0\4\5\2\0\1\6\1\5\3\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5\1\0\1\5\1\0\3\6"+
    "\1\0\6\5\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3"+
    "\0\1\6\7\0\4\5\1\0\1\5\7\0\4\6\3\5\1\6\2\0\1\5\1\0\2\5\1\0\3\5\2\6\1\0\3\6"+
    "\2\0\1\5\11\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0"+
    "\2\5\3\0\2\5\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\5\6\1\0\5\5\3\0\1\5\7\6\1"+
    "\0\2\6\5\0\2\6\1\0\4\5\1\0\3\5\6\0\1\5\2\0\2\5\5\0\3\5\2\0\1\5\3\6\1\0\4\6"+
    "\1\5\5\0\3\5\1\6\7\0\1\5\2\0\2\6\1\0\7\5\1\0\1\5\4\0\1\6\4\0\6\6\1\0\1\6\3"+
    "\0\2\6\4\0\1\5\1\6\1\5\5\6\7\5\10\6\1\0\2\6\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1"+
    "\5\2\0\1\5\6\0\4\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\3\5\2\6\1\0\2\6\1\5"+
    "\2\0\5\5\1\0\1\5\1\0\6\6\2\0\2\6\2\0\4\5\5\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\5"+
    "\5\10\6\11\0\1\6\1\0\7\6\1\5\2\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\5\5\14\6"+
    "\1\5\1\6\5\0\1\5\2\0\3\5\1\0\7\5\2\0\3\6\2\5\3\6\3\0\2\5\2\6\4\0\1\5\1\0\2"+
    "\6\4\0\4\5\10\6\3\0\1\5\4\0\1\5\1\6\5\0\3\6\2\0\1\5\1\6\1\5\5\0\4\6\4\0\4"+
    "\5\4\0\5\6\3\5\3\0\10\6\5\5\2\6\3\0\3\5\3\6\1\0\5\6\4\5\1\6\4\5\3\6\2\5\2"+
    "\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0\3\5\1\0\6\5\2\0\2\5\1\6\13\0\1\6\4\0\1"+
    "\6\3\0\3\6\2\0\1\5\4\0\3\5\2\0\4\5\5\0\5\5\4\0\1\5\4\0\4\5\3\6\2\5\5\0\5\5"+
    "\3\0\2\6\2\0\3\5\6\6\1\0\3\5\1\6\3\5\1\6\4\5\1\6\4\5\3\0\1\5\1\0\1\5\2\0\5"+
    "\5\1\6\2\5\2\6\5\5\1\0\4\5\2\6\4\0\1\5\3\6\2\5\1\6\5\5\2\6\3\0\3\5\4\0\3\5"+
    "\2\6\2\0\6\5\1\0\3\6\1\0\2\6\5\0\5\5\5\0\1\5\1\6\3\5\1\0\2\5\1\0\2\5\3\0\2"+
    "\6\10\0\3\6\1\0\1\5\1\0\1\5\3\0\4\5\4\0\1\6\6\0\2\5\2\0\3\5\3\0\3\5\1\0\2"+
    "\5\1\0\1\5\5\0\1\6\2\0\1\5\3\0\1\5\2\0\4\5\1\0\2\5\2\0\1\5\3\6\1\0\2\6\1\0"+
    "\5\5\2\6\1\0\3\5\1\6\2\0\1\5\1\0\1\6\4\5\5\0\3\6\3\0\2\6\1\5\1\0\1\5\3\0\1"+
    "\5\1\0\4\5\1\0\1\5\4\6\2\5\1\0\1\5\1\6\3\0\1\5\3\0\2\5\3\0\3\6\2\0\6\6\2\5"+
    "\3\0\2\6\1\0\2\6\3\0\6\6\2\0\3\6\2\0\4\6\4\0\1\5\2\0\2\5\2\0\4\5\1\0\4\5\1"+
    "\0\1\5\1\0\6\5\2\0\5\5\1\0\4\5\1\0\4\5\2\0\3\6\2\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0\3\5\1\0\3\5\1\0\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\1\1\5\3\1"+
    "\1\6\6\4\1\7\1\10\1\11\1\12\1\13\10\4"+
    "\1\14\3\4\1\15\1\1\1\16\1\1\2\4\1\1"+
    "\1\17\1\0\1\20\2\5\2\21\1\22\2\0\24\4"+
    "\1\0\1\23\1\24\2\25\10\4\1\26\1\4\1\27"+
    "\7\4\1\30\1\31\3\4\1\32\1\33\1\34\1\4"+
    "\1\35\5\4\1\36\1\4\1\37\6\4\1\40\1\4"+
    "\1\41\3\4\1\42\2\4\1\43\1\44\1\45\7\4"+
    "\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u0104"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0104\0\u0104\0\u0104"+
    "\0\u0104\0\u0104\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u0104\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u0104\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0104\0\u01a0\0\u0104"+
    "\0\u0784\0\u0104\0\u0104\0\u0208\0\u02a4\0\u023c\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0680\0\u0104\0\u0104\0\u0104\0\u07b8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u016c\0\u0d9c\0\u016c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0"+
    "\0\u0ed4\0\u0f08\0\u016c\0\u016c\0\u0f3c\0\u0f70\0\u0fa4\0\u016c"+
    "\0\u016c\0\u016c\0\u0fd8\0\u016c\0\u100c\0\u1040\0\u1074\0\u10a8"+
    "\0\u10dc\0\u016c\0\u1110\0\u016c\0\u1144\0\u1178\0\u11ac\0\u11e0"+
    "\0\u1214\0\u1248\0\u016c\0\u127c\0\u016c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u016c\0\u134c\0\u1380\0\u016c\0\u016c\0\u016c\0\u13b4\0\u13e8"+
    "\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u016c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\6\1\11\1\6\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\11\1\22"+
    "\1\23\1\24\1\11\1\25\3\11\2\6\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\5\11"+
    "\1\37\1\11\1\40\2\11\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\6\3\47\1\6\1\50\2\47\1\51"+
    "\20\47\1\52\33\47\1\6\2\7\1\10\1\6\1\11"+
    "\2\6\1\13\1\14\1\15\1\16\1\17\1\11\1\21"+
    "\1\11\1\22\1\53\1\54\1\11\1\25\3\11\1\6"+
    "\1\55\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\5\11\1\37\1\11\1\40\2\11\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\66\6\2\7\4\6"+
    "\1\56\54\6\65\0\2\7\66\0\2\11\2\0\2\11"+
    "\2\0\13\11\7\0\20\11\1\0\3\11\1\0\7\57"+
    "\1\60\54\57\4\13\1\61\3\13\1\62\53\13\11\63"+
    "\2\64\1\63\1\65\47\63\11\0\2\66\1\0\1\65"+
    "\60\0\1\67\63\0\2\65\56\0\2\11\2\0\2\11"+
    "\2\0\1\11\1\70\11\11\7\0\20\11\1\0\3\11"+
    "\6\0\2\11\2\0\2\11\2\0\7\11\1\71\3\11"+
    "\7\0\14\11\1\72\3\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\1\73\17\11\1\0"+
    "\3\11\6\0\2\11\2\0\2\11\2\0\1\11\1\74"+
    "\7\11\1\75\1\11\7\0\20\11\1\0\3\11\6\0"+
    "\2\11\2\0\2\11\2\0\2\11\1\76\4\11\1\77"+
    "\3\11\7\0\20\11\1\0\3\11\6\0\2\11\2\0"+
    "\2\11\2\0\13\11\7\0\20\11\1\0\2\11\1\100"+
    "\6\0\2\11\2\0\2\11\2\0\13\11\7\0\1\101"+
    "\17\11\1\0\3\11\6\0\2\11\2\0\2\11\2\0"+
    "\13\11\7\0\1\102\17\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\1\11\1\74\11\11\7\0\4\11"+
    "\1\103\13\11\1\0\3\11\6\0\2\11\2\0\2\11"+
    "\2\0\7\11\1\77\3\11\7\0\7\11\1\104\10\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\4\11"+
    "\1\105\6\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\14\11\1\106\3\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\3\11"+
    "\1\107\7\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\14\11\1\110\3\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\13\11"+
    "\7\0\14\11\1\111\3\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\1\112\17\11\1\0"+
    "\3\11\6\0\2\11\2\0\2\11\2\0\2\11\1\113"+
    "\10\11\7\0\20\11\1\0\3\11\1\0\3\47\1\0"+
    "\1\114\2\47\1\0\20\47\1\0\117\47\31\0\1\115"+
    "\37\0\2\11\2\0\2\11\2\0\1\11\1\74\11\11"+
    "\7\0\20\11\1\0\3\11\6\0\2\11\2\0\2\11"+
    "\2\0\7\11\1\77\3\11\7\0\20\11\1\0\3\11"+
    "\64\0\1\116\1\13\1\0\62\13\11\117\2\120\1\117"+
    "\1\0\47\117\5\0\2\11\2\0\2\11\2\0\2\11"+
    "\1\121\10\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\3\11\1\122\7\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\13\11"+
    "\7\0\1\123\17\11\1\0\3\11\6\0\2\11\2\0"+
    "\2\11\2\0\6\11\1\124\4\11\7\0\20\11\1\0"+
    "\3\11\6\0\2\11\2\0\2\11\2\0\13\11\7\0"+
    "\1\125\17\11\1\0\3\11\6\0\2\11\2\0\2\11"+
    "\2\0\12\11\1\126\7\0\20\11\1\0\3\11\6\0"+
    "\2\11\2\0\2\11\2\0\6\11\1\127\4\11\7\0"+
    "\20\11\1\0\3\11\6\0\2\11\2\0\2\11\2\0"+
    "\6\11\1\130\4\11\7\0\20\11\1\0\3\11\6\0"+
    "\2\11\2\0\2\11\2\0\13\11\7\0\20\11\1\0"+
    "\2\11\1\131\6\0\2\11\2\0\2\11\2\0\2\11"+
    "\1\132\10\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\10\11\1\133\2\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\13\11"+
    "\7\0\5\11\1\134\12\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\10\11\1\135\7\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\1\11"+
    "\1\136\11\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\1\11\1\137\16\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\4\11"+
    "\1\140\6\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\14\11\1\141\3\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\3\11"+
    "\1\142\7\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\6\11\1\143\4\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\13\11"+
    "\7\0\15\11\1\144\2\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\3\11\1\145\7\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\13\11"+
    "\7\0\20\11\1\0\2\11\1\146\6\0\2\11\2\0"+
    "\2\11\2\0\3\11\1\147\7\11\7\0\20\11\1\0"+
    "\3\11\6\0\2\11\2\0\2\11\2\0\6\11\1\150"+
    "\4\11\7\0\20\11\1\0\3\11\6\0\2\11\2\0"+
    "\2\11\2\0\11\11\1\151\1\11\7\0\20\11\1\0"+
    "\3\11\6\0\2\11\2\0\2\11\2\0\4\11\1\152"+
    "\6\11\7\0\20\11\1\0\3\11\6\0\2\11\2\0"+
    "\2\11\2\0\6\11\1\153\4\11\7\0\20\11\1\0"+
    "\3\11\6\0\2\11\2\0\2\11\2\0\13\11\7\0"+
    "\1\11\1\125\16\11\1\0\3\11\6\0\2\11\2\0"+
    "\2\11\2\0\13\11\7\0\20\11\1\0\2\11\1\154"+
    "\6\0\2\11\2\0\2\11\2\0\13\11\7\0\6\11"+
    "\1\151\11\11\1\0\3\11\6\0\2\11\2\0\2\11"+
    "\2\0\13\11\7\0\11\11\1\134\6\11\1\0\3\11"+
    "\6\0\2\11\2\0\2\11\2\0\2\11\1\155\10\11"+
    "\7\0\20\11\1\0\3\11\6\0\2\11\2\0\2\11"+
    "\2\0\2\11\1\156\10\11\7\0\20\11\1\0\3\11"+
    "\6\0\2\11\2\0\2\11\2\0\11\11\1\157\1\11"+
    "\7\0\20\11\1\0\3\11\6\0\2\11\2\0\2\11"+
    "\2\0\6\11\1\160\4\11\7\0\20\11\1\0\3\11"+
    "\6\0\2\11\2\0\2\11\2\0\13\11\7\0\20\11"+
    "\1\0\1\161\2\11\6\0\2\11\2\0\2\11\2\0"+
    "\4\11\1\162\6\11\7\0\20\11\1\0\3\11\6\0"+
    "\2\11\2\0\2\11\2\0\13\11\7\0\14\11\1\163"+
    "\3\11\1\0\3\11\6\0\2\11\2\0\2\11\2\0"+
    "\13\11\7\0\20\11\1\0\2\11\1\164\6\0\2\11"+
    "\2\0\2\11\2\0\7\11\1\165\3\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\3\11"+
    "\1\166\7\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\4\11\1\167\6\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\13\11"+
    "\7\0\12\11\1\170\5\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\11\11\1\171\1\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\7\11"+
    "\1\172\3\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\20\11\1\0\1\11"+
    "\1\173\1\11\6\0\2\11\2\0\2\11\2\0\10\11"+
    "\1\174\2\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\12\11\1\175\5\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\2\11"+
    "\1\176\10\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\11\11\1\177\1\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\7\11"+
    "\1\200\3\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\4\11\1\201\6\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\6\11"+
    "\1\202\4\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\13\11\7\0\15\11\1\203\2\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\1\11"+
    "\1\204\11\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\3\11\1\205\7\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\11\11"+
    "\1\206\1\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\11\11\1\207\1\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\13\11"+
    "\7\0\16\11\1\210\1\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\3\11\1\211\7\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\4\11"+
    "\1\212\6\11\7\0\20\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\11\11\1\213\1\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\13\11"+
    "\7\0\12\11\1\214\5\11\1\0\3\11\6\0\2\11"+
    "\2\0\2\11\2\0\11\11\1\215\1\11\7\0\20\11"+
    "\1\0\3\11\6\0\2\11\2\0\2\11\2\0\1\11"+
    "\1\216\11\11\7\0\20\11\1\0\3\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5408];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\15\1\5\11\10\1\1\11"+
    "\5\1\1\11\4\1\1\11\1\0\1\11\1\1\2\11"+
    "\2\1\2\0\24\1\1\0\3\11\77\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  Stack<String> jsonStack = new Stack<String>();
  Stack<Integer> state = new Stack<Integer>();
  public boolean textStarted = false;

  public JourneyLexer() {
    this((java.io.Reader)null);
  }


  public void pushState(Integer newState){
      state.push(yystate());
      yybegin(newState);
  }
  public void popState(){
        yybegin(state.pop());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JourneyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 39: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 3: 
            { return RPAREN;
            } 
            // fall through
          case 41: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 42: break;
          case 5: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 43: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 44: break;
          case 7: 
            { return LBRACE;
            } 
            // fall through
          case 45: break;
          case 8: 
            { return RBRACE;
            } 
            // fall through
          case 46: break;
          case 9: 
            { return LPAREN;
            } 
            // fall through
          case 47: break;
          case 10: 
            { return COLON;
            } 
            // fall through
          case 48: break;
          case 11: 
            { return SEMICOLON;
            } 
            // fall through
          case 49: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 50: break;
          case 13: 
            { return TEXT_LITERAL;
            } 
            // fall through
          case 51: break;
          case 14: 
            { popState();
                                        popState();
                                        return BACKTICK;
            } 
            // fall through
          case 52: break;
          case 15: 
            { pushState(IN_TEXT_TEMPLATE); return BACKTICK;
            } 
            // fall through
          case 53: break;
          case 16: 
            { return NAME;
            } 
            // fall through
          case 54: break;
          case 17: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return POSITIVEINTEGERVALUE;
            } 
            // fall through
          case 55: break;
          case 18: 
            { return DOUBLEVALUE ;
            } 
            // fall through
          case 56: break;
          case 19: 
            { pushState(IN_SCRIPLET);return SCRIPLET_START;
            } 
            // fall through
          case 57: break;
          case 20: 
            { popState(); return SCRIPLET_END;
            } 
            // fall through
          case 58: break;
          case 21: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return INETEGERVALUE;
            } 
            // fall through
          case 59: break;
          case 22: 
            { return ADD;
            } 
            // fall through
          case 60: break;
          case 23: 
            { return SUB;
            } 
            // fall through
          case 61: break;
          case 24: 
            { return MUL;
            } 
            // fall through
          case 62: break;
          case 25: 
            { return DIV;
            } 
            // fall through
          case 63: break;
          case 26: 
            { return NULLVALUE;
            } 
            // fall through
          case 64: break;
          case 27: 
            { return BOOLEANVALUE;
            } 
            // fall through
          case 65: break;
          case 28: 
            { pushState(IN_TEXT);return TEXT;
            } 
            // fall through
          case 66: break;
          case 29: 
            { return UUID;
            } 
            // fall through
          case 67: break;
          case 30: 
            { return PRINT;
            } 
            // fall through
          case 68: break;
          case 31: 
            { return ROUND;
            } 
            // fall through
          case 69: break;
          case 32: 
            { return RANDOM;
            } 
            // fall through
          case 70: break;
          case 33: 
            { return STRING;
            } 
            // fall through
          case 71: break;
          case 34: 
            { return CONCAT;
            } 
            // fall through
          case 72: break;
          case 35: 
            { return INTEGER;
            } 
            // fall through
          case 73: break;
          case 36: 
            { return BOOL;
            } 
            // fall through
          case 74: break;
          case 37: 
            { return FILLABLE;
            } 
            // fall through
          case 75: break;
          case 38: 
            { return POSITIVE_INTEGER;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
