/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.qalens.corr.lang.core.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;import com.intellij.psi.tree.IElementType;
import com.qalens.corr.lang.core.psi.JrnTokenType;import kotlin.reflect.jvm.internal.impl.resolve.constants.LongValue;
import static com.qalens.corr.lang.core.psi.JrnElementTypes.*;
import static com.intellij.psi.TokenType.*;
import java.net.URL;import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Journey.flex</tt>
 */
class JourneyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TEXT_TEMPLATE = 2;
  public static final int IN_SCRIPLET = 4;
  public static final int IN_STRING = 6;
  public static final int IN_TEXT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\5\0\1\16"+
    "\1\17\1\16\2\20\1\21\3\20\1\21\71\20\1\22\1\20\1\23\1\0\1\24\1\25\2\0\16\26"+
    "\1\27\1\30\1\31\1\32\2\20\1\33\11\20\1\34\21\20\1\35\1\36\24\20\1\37\3\20"+
    "\1\21\1\40\1\37\4\20\1\0\1\41\4\26\1\42\1\43\1\0\3\20\2\44\3\0\1\26\1\45\5"+
    "\20\1\46\3\26\1\47\1\50\13\20\1\51\1\52\1\53\1\54\1\26\1\55\2\0\1\56\3\20"+
    "\3\26\1\57\12\20\1\60\1\26\1\61\1\0\1\26\1\62\3\20\1\46\1\63\1\16\2\20\1\60"+
    "\1\64\1\65\1\66\2\0\3\20\1\67\10\0\2\20\1\27\1\70\2\0\1\71\1\26\1\72\3\26"+
    "\1\73\6\20\1\74\2\26\1\75\1\20\1\76\1\26\1\37\1\20\1\77\1\100\1\101\2\20\1"+
    "\102\1\103\1\104\1\52\1\105\1\106\1\107\1\76\1\26\1\23\1\0\1\110\1\111\1\101"+
    "\2\20\1\102\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\26\1\121\1\0\1\110"+
    "\1\34\1\33\2\20\1\102\1\122\1\104\1\42\1\123\1\124\1\0\1\76\1\26\1\0\1\40"+
    "\1\110\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\120\1\107\1\76\1\26"+
    "\1\40\1\0\1\125\1\126\1\127\1\130\1\131\1\126\1\20\1\132\1\133\1\134\1\135"+
    "\1\0\1\120\1\26\2\0\1\136\1\27\1\102\2\20\1\102\1\20\1\137\1\140\1\134\1\141"+
    "\1\44\1\76\1\26\2\0\1\77\1\27\1\102\2\20\1\102\1\142\1\104\1\140\1\134\1\141"+
    "\1\143\1\76\1\26\1\144\1\0\1\110\1\27\1\102\4\20\1\145\1\140\1\146\1\147\1"+
    "\150\1\76\1\26\1\0\1\36\1\151\1\20\1\21\1\36\2\20\1\33\1\152\1\21\1\153\1"+
    "\154\1\26\1\120\1\26\1\155\1\0\1\37\5\20\1\156\1\45\1\157\1\160\1\26\1\161"+
    "\4\0\1\162\1\163\1\164\1\37\1\165\1\166\1\156\1\167\1\170\1\171\1\26\1\172"+
    "\4\0\1\124\2\0\1\161\1\26\1\161\1\173\1\174\1\20\1\37\3\20\1\24\1\41\1\26"+
    "\1\140\1\175\1\26\1\41\3\26\1\176\1\177\7\0\5\20\1\46\1\26\1\200\1\26\1\161"+
    "\1\60\1\201\1\202\1\203\1\204\1\20\1\205\1\206\1\26\1\171\4\20\1\34\1\207"+
    "\5\20\1\210\51\20\1\127\1\21\1\127\5\20\1\127\4\20\1\127\1\21\1\127\1\20\1"+
    "\21\7\20\1\127\10\20\1\211\1\0\1\41\1\161\1\0\2\20\2\0\12\20\2\70\1\37\114"+
    "\20\1\100\2\20\1\37\2\20\1\44\11\20\1\126\1\20\1\124\1\20\1\27\1\212\1\0\2"+
    "\20\1\212\1\0\2\20\1\213\1\0\1\20\1\27\1\214\1\0\6\20\1\215\3\26\1\216\1\217"+
    "\1\26\1\161\3\0\1\220\1\26\1\161\13\20\1\0\5\20\1\221\10\20\1\70\1\0\3\20"+
    "\1\21\1\26\1\222\1\26\1\222\1\120\1\26\3\20\1\70\1\24\1\0\5\20\1\223\3\20"+
    "\1\23\1\26\1\45\4\0\2\20\1\157\1\222\6\20\1\175\1\160\3\26\1\52\1\26\1\161"+
    "\1\26\1\161\1\150\1\0\1\26\1\171\10\0\1\224\5\20\1\215\1\26\1\224\1\223\1"+
    "\26\1\161\1\0\1\225\1\222\1\0\1\226\3\20\1\75\1\203\1\26\1\62\4\20\1\60\1"+
    "\26\1\222\1\0\4\20\1\215\2\26\1\0\1\26\1\227\1\26\1\62\3\20\1\70\1\20\1\124"+
    "\10\0\1\230\2\26\1\231\1\232\1\161\30\20\6\26\1\171\1\225\42\20\2\70\4\20"+
    "\2\70\1\20\1\233\3\20\1\70\6\20\1\27\1\170\1\234\1\24\1\235\1\223\1\20\1\24"+
    "\1\234\1\24\7\0\1\106\1\236\1\0\1\237\3\0\1\40\1\150\2\0\1\20\1\24\6\0\1\26"+
    "\1\176\1\240\1\26\1\236\1\0\1\241\1\36\1\152\1\70\1\25\1\102\1\20\1\242\1"+
    "\243\1\244\2\0\5\20\1\124\116\0\5\20\1\21\5\20\1\21\20\20\1\24\1\245\1\246"+
    "\1\0\4\20\1\34\1\207\7\20\1\150\1\0\1\106\2\20\1\21\1\0\10\21\4\26\1\243\3"+
    "\0\1\37\1\205\1\247\1\24\1\37\11\20\1\21\1\250\1\37\12\20\1\210\1\243\4\20"+
    "\1\70\1\37\12\20\1\21\2\0\3\20\1\44\6\0\170\20\1\70\11\0\72\20\1\70\5\0\21"+
    "\20\1\24\10\0\5\20\1\70\41\20\1\24\2\20\1\26\1\246\2\0\5\20\1\157\1\71\1\251"+
    "\3\20\1\60\12\20\1\161\3\0\1\150\1\20\1\36\14\20\1\101\3\20\1\21\1\20\7\0"+
    "\1\150\1\20\1\252\1\253\2\20\1\46\3\0\6\20\1\223\1\0\1\62\5\20\1\215\1\26"+
    "\1\171\1\0\1\26\1\161\2\26\1\62\1\254\1\26\1\62\2\20\1\60\1\171\2\20\1\157"+
    "\1\26\1\222\1\0\3\20\1\24\1\73\5\20\1\46\1\26\1\236\1\150\1\26\1\161\1\255"+
    "\1\20\1\26\1\256\5\20\1\75\1\160\1\0\1\253\1\257\1\26\1\161\2\20\1\21\1\260"+
    "\6\20\1\202\1\261\1\221\2\0\1\262\1\20\1\46\1\263\1\0\3\264\1\0\2\21\5\20"+
    "\1\210\1\70\1\0\16\20\1\46\1\265\1\26\1\161\64\20\1\223\1\0\2\20\1\21\1\266"+
    "\5\20\1\223\40\0\55\20\1\70\15\20\1\23\4\0\1\21\1\0\1\266\1\267\1\20\1\102"+
    "\1\21\1\170\1\270\15\20\1\23\3\0\1\266\20\20\1\70\1\164\32\20\1\70\2\0\10"+
    "\20\1\36\6\20\5\0\1\20\1\23\2\26\2\0\2\26\1\271\2\0\1\272\4\0\1\273\1\233"+
    "\17\20\1\24\2\0\1\26\1\161\1\37\2\20\1\274\1\37\2\20\1\44\1\275\6\20\1\60"+
    "\3\20\1\21\3\36\1\276\4\0\1\20\1\142\2\20\1\21\2\20\1\277\1\20\1\70\1\20\1"+
    "\70\4\0\17\20\1\44\10\0\6\20\1\24\20\0\1\300\20\0\3\20\1\24\6\20\1\124\1\0"+
    "\1\236\3\0\4\20\2\0\3\20\1\44\4\20\1\60\1\45\3\20\1\70\4\20\1\223\1\20\1\247"+
    "\5\0\23\20\1\70\1\26\1\161\4\20\1\223\4\20\1\223\5\20\1\0\6\20\1\223\23\0"+
    "\46\20\1\21\1\0\2\20\1\70\1\0\1\20\23\0\1\70\1\102\4\20\1\34\1\301\2\20\1"+
    "\70\1\0\2\20\1\21\1\0\3\20\1\21\10\0\2\20\1\302\1\0\2\20\1\70\1\0\3\20\1\23"+
    "\10\0\7\20\1\275\10\0\1\303\1\71\1\142\1\37\2\20\1\223\1\114\4\0\3\20\1\24"+
    "\3\20\1\24\4\0\1\20\1\37\2\20\1\304\3\0\6\20\1\70\1\0\2\20\1\70\1\0\2\20\1"+
    "\44\1\0\2\20\1\23\15\0\11\20\1\124\6\0\6\20\1\44\1\0\6\20\1\44\41\0\1\226"+
    "\6\20\1\26\1\160\3\0\1\120\1\26\1\0\1\106\1\226\5\20\1\26\1\45\2\0\3\20\1"+
    "\124\1\26\1\161\1\226\3\20\1\157\1\26\1\140\1\26\2\0\4\20\1\305\1\0\1\226"+
    "\5\20\1\46\1\26\1\306\1\307\1\26\1\310\4\0\2\20\1\33\2\20\1\215\1\26\1\177"+
    "\10\0\1\21\1\311\1\20\1\34\1\20\1\124\5\20\1\157\1\26\1\45\1\26\1\161\1\136"+
    "\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\135\1\243\1\76\2\176\21\0"+
    "\6\20\1\175\1\26\1\200\1\44\1\26\1\161\4\0\6\20\2\26\1\312\1\0\1\26\1\161"+
    "\24\0\5\20\1\157\1\171\1\26\1\236\2\0\1\257\4\0\6\20\2\26\1\313\1\0\1\26\1"+
    "\161\4\0\5\20\1\46\1\26\1\0\1\26\1\161\6\0\3\20\1\314\1\26\1\222\1\26\1\161"+
    "\54\0\10\20\1\26\1\161\1\0\1\150\70\0\7\20\1\124\40\0\1\20\1\102\3\20\1\157"+
    "\1\160\1\26\1\124\1\0\1\26\1\161\2\0\1\36\3\20\1\315\2\26\1\41\1\160\51\0"+
    "\63\20\1\23\14\0\15\20\1\21\2\0\30\20\1\223\27\0\5\20\1\21\72\0\10\20\1\21"+
    "\67\0\7\20\1\124\3\20\1\21\1\26\1\161\14\0\3\20\1\70\1\176\1\0\6\20\1\160"+
    "\1\0\1\223\1\0\1\26\1\161\1\266\2\20\1\243\2\20\56\0\10\20\1\24\1\0\1\75\4"+
    "\26\1\160\1\0\1\106\1\226\1\20\10\0\1\124\3\0\75\20\1\24\2\0\36\20\1\44\41"+
    "\0\1\23\77\0\15\20\1\44\1\20\1\24\1\20\1\124\1\20\1\316\130\0\1\272\1\317"+
    "\1\45\1\225\1\320\1\222\3\0\1\321\22\0\1\307\67\0\12\20\1\27\10\20\1\27\1"+
    "\322\1\323\1\20\1\324\1\142\7\20\1\34\1\325\2\27\3\20\1\326\1\170\1\36\1\102"+
    "\51\20\1\70\3\20\1\102\2\20\1\210\3\20\1\210\2\20\1\27\3\20\1\27\2\20\1\21"+
    "\3\20\1\21\3\20\1\102\3\20\1\102\2\20\1\210\1\327\14\26\1\160\1\225\5\26\1"+
    "\176\1\300\1\0\1\237\2\0\1\225\1\41\1\26\52\0\1\160\2\26\1\330\1\331\1\45"+
    "\72\0\30\20\1\24\1\0\1\160\5\0\10\20\1\215\1\45\1\26\1\161\24\0\1\142\3\20"+
    "\1\162\1\37\1\210\1\332\1\241\1\333\1\162\1\233\1\162\2\210\1\117\1\20\1\33"+
    "\1\20\1\223\1\334\1\33\1\20\1\223\50\0\32\20\1\21\5\0\106\20\1\24\1\0\33\20"+
    "\1\70\120\20\1\23\53\0\3\20\1\70\134\0\36\26\2\0");

  /* The ZZ_CMAP_A table has 1768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\2\0\1\2\2\0\1\3\1\63\1\11\2\0\1\50\1\60\1\0\1\55\1\56\1\17\1"+
    "\57\1\103\1\14\1\15\1\16\1\13\11\12\1\64\1\65\1\4\1\47\1\62\2\0\1\73\1\102"+
    "\1\6\1\101\1\72\1\67\2\6\1\100\2\6\1\74\3\6\1\76\1\6\1\70\1\75\1\66\1\71\5"+
    "\6\1\53\1\5\1\54\1\0\1\104\1\10\1\26\1\35\1\27\1\32\1\40\1\44\1\31\1\30\1"+
    "\22\1\46\1\105\1\34\1\25\1\23\1\36\1\20\1\42\1\21\1\41\1\24\1\33\1\77\1\43"+
    "\1\45\1\37\1\6\1\51\1\61\1\52\4\0\1\6\12\0\1\6\1\0\1\7\17\6\1\0\2\6\4\0\4"+
    "\6\6\0\5\6\7\0\1\6\1\0\1\6\1\0\10\7\5\6\1\0\2\6\3\0\3\6\1\0\1\6\6\0\1\6\1"+
    "\7\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\7"+
    "\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\3\7\5\0\3\6\7\7\4\0\2\6\1"+
    "\7\13\6\1\0\1\6\7\7\2\0\6\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\2\6\1\7\6\6\3"+
    "\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2"+
    "\0\1\6\3\7\4\0\6\6\6\0\6\7\1\0\11\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2"+
    "\7\1\6\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\3"+
    "\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\1\6\1\0\3\7\1\0\6\6\4\0\2\6\1\0\2\6\1"+
    "\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0"+
    "\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0\1\7\1\6\1\0"+
    "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0\3"+
    "\7\1\0\4\7\2\0\1\6\6\0\5\7\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\1\0\4\6\1\0"+
    "\3\6\6\0\1\6\2\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\5\0\3\6\1\7\7\0\1\6\2"+
    "\0\2\7\1\0\7\6\1\0\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\1\6\5\7"+
    "\7\6\10\7\1\0\2\7\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2"+
    "\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\10\7\11\0\1\7\1\0\7\7\1"+
    "\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\5\0\1\6\2\0\3\6\1"+
    "\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\4"+
    "\0\1\6\1\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0\4\7\4\0\4\6\4\0\5\7\3\6\3\0\10\7\5"+
    "\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\2\0\3\6\1\0\6\6\2\0\2\6\1\7\13\0\1\7\4\0\1\7\3\0\3\7\2\0\1\6\4\0\3\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\5\6\3\0\2\7\2\0\3\6\6\7\1\0\3"+
    "\6\1\7\3\6\1\7\4\6\1\7\4\6\3\0\1\6\1\0\1\6\2\0\5\6\1\7\2\6\2\7\5\6\1\0\4\6"+
    "\2\7\4\0\1\6\3\7\2\6\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2"+
    "\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\2\6\3\0\2\7\10\0\3\7\1\0\1\6\1\0\1"+
    "\6\3\0\4\6\4\0\1\7\6\0\2\6\2\0\3\6\3\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\1\6"+
    "\3\0\1\6\2\0\4\6\1\0\2\6\2\0\1\6\3\7\1\0\2\7\1\0\5\6\2\7\1\0\3\6\1\7\2\0\1"+
    "\6\1\0\1\7\4\6\5\0\3\7\3\0\2\7\1\6\1\0\1\6\3\0\1\6\1\0\4\6\1\0\1\6\4\7\2\6"+
    "\1\0\1\6\1\7\3\0\1\6\3\0\2\6\3\0\3\7\2\0\6\7\2\6\3\0\2\7\1\0\2\7\3\0\6\7\2"+
    "\0\3\7\2\0\4\7\4\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0"+
    "\4\6\1\0\4\6\2\0\3\7\2\0\7\7\1\0\2\7\1\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1"+
    "\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\1\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\23\4\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\1\1\23"+
    "\1\24\1\25\1\26\7\4\1\27\1\30\2\1\1\31"+
    "\11\4\1\1\1\13\1\32\1\33\1\0\1\34\2\5"+
    "\2\35\1\36\1\35\1\0\1\37\1\40\1\0\11\4"+
    "\1\41\4\4\1\42\26\4\1\43\13\4\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\10\4\1\0\1\53"+
    "\3\4\1\54\1\0\2\55\2\40\2\0\2\4\1\56"+
    "\22\4\1\57\4\4\1\60\2\4\1\61\5\4\1\62"+
    "\15\4\1\63\10\4\1\63\1\0\1\64\2\4\1\65"+
    "\1\66\6\4\1\67\1\70\1\71\1\4\1\72\1\73"+
    "\1\4\1\74\1\75\1\4\1\76\4\4\1\77\5\4"+
    "\1\100\1\4\1\101\2\4\1\102\2\4\1\103\1\104"+
    "\1\105\1\106\1\4\1\107\6\4\1\110\1\111\1\112"+
    "\10\4\1\113\5\4\1\114\1\115\1\4\1\116\5\4"+
    "\1\117\5\4\1\120\1\4\1\121\4\4\1\122\3\4"+
    "\1\123\1\4\1\124\1\125\1\4\1\126\2\4\1\127"+
    "\2\4\1\130\1\4\1\131\1\4\1\132\1\133\3\4"+
    "\1\134\1\135\1\4\1\136\1\137\2\4\1\140\1\141"+
    "\2\4\1\142\6\4\1\143\4\4\1\144\1\4\1\145"+
    "\15\4\1\146\1\4\1\147\7\4\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u015e\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa"+
    "\0\u0af0\0\u015e\0\u015e\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u015e\0\u0d20\0\u0d66\0\u0dac\0\u015e\0\u0df2"+
    "\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022"+
    "\0\u0992\0\u1068\0\u015e\0\u015e\0\u0276\0\u015e\0\u10ae\0\u015e"+
    "\0\u015e\0\u0302\0\u03d4\0\u10f4\0\u113a\0\u015e\0\u1180\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u0230\0\u1482\0\u14c8\0\u150e\0\u1554\0\u0230\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u0230\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u0dac\0\u015e\0\u20d0\0\u2116\0\u215c\0\u015e\0\u10f4\0\u015e"+
    "\0\u113a\0\u015e\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u0230"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u0230\0\u27ec\0\u2832\0\u2878\0\u28be\0\u0230"+
    "\0\u2904\0\u294a\0\u0230\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8"+
    "\0\u0230\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92"+
    "\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u0230"+
    "\0\u30f2\0\u015e\0\u3138\0\u317e\0\u0230\0\u0230\0\u31c4\0\u320a"+
    "\0\u3250\0\u3296\0\u32dc\0\u3322\0\u0230\0\u015e\0\u0230\0\u3368"+
    "\0\u0230\0\u015e\0\u33ae\0\u015e\0\u015e\0\u33f4\0\u015e\0\u343a"+
    "\0\u3480\0\u34c6\0\u350c\0\u015e\0\u3552\0\u3598\0\u35de\0\u3624"+
    "\0\u366a\0\u0230\0\u36b0\0\u0230\0\u36f6\0\u373c\0\u0230\0\u3782"+
    "\0\u37c8\0\u015e\0\u0230\0\u0230\0\u380e\0\u3854\0\u0230\0\u389a"+
    "\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u380e\0\u0230\0\u0230\0\u015e"+
    "\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2"+
    "\0\u0230\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u015e\0\u015e"+
    "\0\u3d86\0\u015e\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u015e"+
    "\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u015e\0\u4088\0\u015e"+
    "\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u015e\0\u41e6\0\u422c\0\u4272"+
    "\0\u0230\0\u42b8\0\u0230\0\u0230\0\u42fe\0\u0230\0\u4344\0\u438a"+
    "\0\u0230\0\u43d0\0\u4416\0\u0230\0\u445c\0\u015e\0\u44a2\0\u0230"+
    "\0\u0230\0\u44e8\0\u452e\0\u4574\0\u015e\0\u0230\0\u45ba\0\u015e"+
    "\0\u0230\0\u4600\0\u4646\0\u0230\0\u0230\0\u468c\0\u46d2\0\u0230"+
    "\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u015e\0\u48bc"+
    "\0\u4902\0\u4948\0\u498e\0\u015e\0\u49d4\0\u015e\0\u4a1a\0\u4a60"+
    "\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90"+
    "\0\u4cd6\0\u4d1c\0\u4d62\0\u015e\0\u4da8\0\u0230\0\u4dee\0\u4e34"+
    "\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\3\7\1\10\1\6\1\11\1\6\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\11\1\41\1\42"+
    "\1\11\1\43\1\44\2\11\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\5\11\1\66\1\67"+
    "\1\11\1\70\1\71\1\72\1\73\2\11\4\74\1\75"+
    "\1\76\2\74\1\77\75\74\1\6\3\7\1\10\1\6"+
    "\1\11\2\6\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\11\1\100\1\24\1\25\1\101\1\102\1\103"+
    "\1\31\2\11\1\104\1\105\1\106\3\11\1\41\1\107"+
    "\2\11\1\110\2\11\1\111\1\112\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\5\11\1\66\1\67\1\11"+
    "\1\70\1\71\1\72\1\73\2\11\107\6\3\7\4\6"+
    "\1\113\75\6\107\0\3\7\151\0\1\114\44\0\2\11"+
    "\2\0\2\11\4\0\27\11\17\0\15\11\1\0\2\11"+
    "\10\115\1\116\75\115\5\13\1\117\3\13\1\120\74\13"+
    "\12\121\2\122\1\121\1\123\102\121\2\124\1\121\1\123"+
    "\70\121\12\0\1\125\1\0\1\126\103\0\2\123\110\0"+
    "\1\127\1\130\74\0\2\11\2\0\2\11\4\0\1\11"+
    "\1\131\4\11\1\132\4\11\1\133\2\11\1\134\10\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\135\1\11\1\136\3\11\1\137\7\11\1\140"+
    "\1\11\1\141\6\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\24\11\1\142\2\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\13\11\1\143\2\11\1\144\10\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\1\11\1\145"+
    "\1\146\13\11\1\147\1\11\1\150\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\2\11"+
    "\1\151\3\11\1\152\4\11\1\153\2\11\1\154\10\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\11\1\155\1\11\1\156\6\11\1\157\6\11"+
    "\1\160\5\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\16\11\1\161\10\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\20\11"+
    "\1\162\6\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\163\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\2\11"+
    "\1\164\15\11\1\165\6\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\1\11\1\166\1\11"+
    "\1\167\7\11\1\170\13\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\1\171\1\11\1\172"+
    "\13\11\1\173\1\11\1\174\6\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\16\11\1\175"+
    "\10\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\3\11\1\176\11\11\1\177\11\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\3\11\1\200\10\11\1\201\12\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\4\11\1\202"+
    "\1\11\1\203\4\11\1\204\3\11\1\205\7\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\2\11\1\206\24\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\1\11\1\207\4\11\1\210"+
    "\7\11\1\211\10\11\17\0\15\11\1\0\2\11\47\0"+
    "\1\212\12\0\1\213\102\0\1\214\106\0\1\215\106\0"+
    "\1\216\73\0\1\217\105\0\1\220\44\0\2\11\2\0"+
    "\2\11\4\0\1\11\1\145\25\11\17\0\2\11\1\221"+
    "\12\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\6\11\1\222\20\11\17\0\5\11\1\223\7\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\4\11\1\224"+
    "\22\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\16\11\1\225\10\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\3\11\1\226"+
    "\23\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\16\11\1\227\10\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\16\11\1\230"+
    "\10\11\17\0\15\11\1\0\2\11\4\74\1\0\1\231"+
    "\2\74\1\0\75\74\50\0\1\232\41\0\2\74\2\0"+
    "\1\74\103\0\2\11\2\0\2\11\4\0\1\135\1\11"+
    "\1\136\3\11\1\137\7\11\1\140\10\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\1\11"+
    "\1\145\1\146\24\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\2\11\1\151\10\11\1\153"+
    "\2\11\1\154\10\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\1\11\1\155\10\11\1\157"+
    "\14\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\2\11\1\164\24\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\3\11\1\167"+
    "\7\11\1\170\13\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\1\171\17\11\1\233\6\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\13\11\1\204\13\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\1\11\1\234\4\11"+
    "\1\210\7\11\1\235\10\11\17\0\15\11\1\0\2\11"+
    "\62\0\1\236\23\0\1\13\2\0\103\13\12\0\2\237"+
    "\1\0\1\123\70\0\12\240\2\241\1\240\1\0\70\240"+
    "\1\127\1\242\1\243\103\127\17\244\1\245\66\244\6\0"+
    "\2\11\2\0\2\11\4\0\2\11\1\246\24\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\4\11\1\247\22\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\4\11\1\250\14\11\1\251"+
    "\5\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\21\11\1\252\5\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\6\11\1\253"+
    "\20\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\11\11\1\254\15\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\3\11\1\255"+
    "\23\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\13\11\1\256\13\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\21\11\1\257"+
    "\1\260\4\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\14\11\1\261\12\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\23\11"+
    "\1\262\3\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\13\11\1\263\13\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\5\11"+
    "\1\264\21\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\25\11\1\265\1\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\12\11"+
    "\1\266\14\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\4\11\1\267\22\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\14\11"+
    "\1\270\12\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\12\11\1\271\14\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\1\11"+
    "\1\272\25\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\12\11\1\273\14\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\12\11"+
    "\1\274\14\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\17\11\1\275\7\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\3\11"+
    "\1\276\23\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\6\11\1\277\20\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\4\11"+
    "\1\300\22\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\27\11\17\0\11\11\1\301\3\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\14\11"+
    "\1\302\12\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\14\11\1\303\12\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\2\11"+
    "\1\304\24\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\2\11\1\305\24\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\6\11"+
    "\1\306\20\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\21\11\1\307\5\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\6\11"+
    "\1\310\20\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\4\11\1\311\17\11\1\312\2\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\12\11\1\313\14\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\26\11\1\314\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\7\11\1\315\17\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\21\11\1\316\5\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\6\11\1\317\20\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\320\23\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\15\11\1\321\11\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\322\23\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\4\11\1\323\22\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\16\11\1\324\10\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\14\11\1\325\12\11\17\0\15\11\1\0\1\11\1\326"+
    "\6\0\2\11\2\0\2\11\4\0\1\11\1\327\25\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\27\11\17\0\3\11\1\330\11\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\14\11\1\325\12\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\27\11\17\0\6\11\1\331\6\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\1\11\1\332\25\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\21\11\1\333\5\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\4\11\1\334\22\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\13\11\1\335\13\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\16\11\1\336\10\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\24\11\1\312\2\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\16\11\1\337\10\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\11\1\340\25\11\17\0\15\11\1\0\2\11"+
    "\1\0\1\242\104\0\17\244\1\341\66\244\16\0\1\342"+
    "\1\245\74\0\2\11\2\0\2\11\4\0\3\11\1\343"+
    "\23\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\7\11\1\344\17\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\10\11\1\345"+
    "\16\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\4\11\1\346\22\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\12\11\1\347"+
    "\14\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\10\11\1\350\16\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\12\11\1\351"+
    "\14\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\3\11\1\352\23\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\1\353\26\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\13\11\1\354\13\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\14\11\1\355\12\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\27\11\6\0\1\356\10\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\20\11\1\357\6\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\20\11\1\360\6\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\4\11\1\361\22\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\27\11\6\0\1\362\10\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\7\11\1\363\17\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\27\11\6\0\1\364\10\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\27\11\6\0\1\365"+
    "\10\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\6\11\1\366\20\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\27\11\6\0\1\367"+
    "\10\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\3\11\1\370\23\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\4\11\1\371\2\11"+
    "\1\372\17\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\12\11\1\373\14\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\27\11"+
    "\6\0\1\374\10\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\375\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\22\11"+
    "\1\376\4\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\12\11\1\377\14\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\12\11"+
    "\1\u0100\14\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\4\11\1\u0101\22\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\12\11"+
    "\1\u0102\14\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\4\11\1\u0103\22\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\17\11"+
    "\1\u0104\7\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\u0105\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\16\11"+
    "\1\u0106\10\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\u0107\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\4\11"+
    "\1\u0108\22\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\12\11\1\u0109\14\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\27\11"+
    "\6\0\1\u010a\10\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\7\11\1\u010b\17\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\10\11"+
    "\1\u010c\16\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\5\11\1\u010d\21\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\21\11"+
    "\1\263\5\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\u010e\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\5\11"+
    "\1\u010f\21\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\27\11\17\0\4\11\1\357\10\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\27\11"+
    "\17\0\7\11\1\330\5\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\2\11\1\u0110\24\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\2\11"+
    "\1\u0111\24\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\u0112\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\15\11"+
    "\1\u0113\11\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\14\11\1\u0114\12\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\5\11"+
    "\1\u0115\21\11\17\0\15\11\1\0\2\11\16\244\1\342"+
    "\1\341\66\244\6\0\2\11\2\0\2\11\4\0\4\11"+
    "\1\u0116\22\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\10\11\1\u0117\16\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\27\11"+
    "\6\0\1\u0118\10\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\4\11\1\u0119\22\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\16\11"+
    "\1\u011a\10\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\12\11\1\u011b\14\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\16\11"+
    "\1\u011c\10\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\u011d\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\21\11"+
    "\1\u011e\5\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\10\11\1\u011f\16\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\17\11"+
    "\1\u0120\7\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\7\11\1\u0121\17\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\6\11"+
    "\1\u0122\20\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\6\11\1\u0123\20\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\20\11"+
    "\1\u0124\6\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\4\11\1\u0125\22\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\13\11"+
    "\1\u0126\13\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\27\11\6\0\1\u0127\10\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\27\11"+
    "\6\0\1\u0128\10\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\u0129\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\27\11"+
    "\6\0\1\u012a\10\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\7\11\1\u012b\17\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\12\11"+
    "\1\u012c\14\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\13\11\1\u012d\13\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\15\11"+
    "\1\u012e\11\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\27\11\17\0\15\11\1\0\1\u012f"+
    "\1\11\6\0\2\11\2\0\2\11\4\0\27\11\6\0"+
    "\1\u0130\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\3\11\1\u0131\23\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\4\11\1\u0132"+
    "\22\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\11\11\1\u0133\15\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\14\11\1\u0134"+
    "\12\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\20\11\1\u0135\6\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\27\11\6\0"+
    "\1\u0136\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\5\11\1\u0137\21\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\27\11\6\0"+
    "\1\u0138\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\3\11\1\u0139\23\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\21\11\1\u013a"+
    "\5\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\4\11\1\u013b\22\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\2\11\1\u013c"+
    "\24\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\27\11\6\0\1\u013d\10\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\2\11\1\u013e"+
    "\24\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\4\11\1\u013f\22\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\1\11\1\u0140"+
    "\25\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\20\11\1\u0141\6\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\20\11\1\u0142"+
    "\6\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\3\11\1\u0143\23\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\4\11\1\u0144"+
    "\22\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\20\11\1\u0145\6\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\21\11\1\u0146"+
    "\5\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\16\11\1\u0147\10\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\26\11\1\u0148"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\11\11\1\u0149\15\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\2\11\1\u014a\24\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\20\11\1\u014b\6\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\20\11\1\u014c\6\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\6\11\1\u014d\20\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\27\11\6\0\1\u014e"+
    "\10\0\15\11\1\0\1\u014f\1\11\6\0\2\11\2\0"+
    "\2\11\4\0\12\11\1\u0150\14\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\4\11\1\u0151"+
    "\22\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\6\11\1\u0152\20\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\3\11\1\u0153"+
    "\23\11\17\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\3\11\1\u0154\23\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\27\11\6\0"+
    "\1\u0155\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\21\11\1\u0156\5\11\17\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\27\11\17\0"+
    "\15\11\1\0\1\u0157\1\11\6\0\2\11\2\0\2\11"+
    "\4\0\27\11\6\0\1\u0158\10\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\25\11\1\u0159\1\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\21\11\1\u015a\5\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\27\11\17\0\11\11"+
    "\1\u015b\3\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\11\1\u015c\25\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\3\11\1\u015d\23\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\20\11\1\u015e\6\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\5\11\1\u015f\21\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\11\11\1\u0160\15\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\21\11\1\u0161\5\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\11\1\u0162\25\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\16\11\1\u0163\10\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\20\11\1\u0164\6\11\17\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\14\11\1\u0165\12\11"+
    "\17\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\u0166\26\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\27\11\6\0\1\u0167\10\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\6\11\1\u0168\20\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\u0169\23\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\27\11\17\0\12\11\1\u016a\2\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\20\11\1\u016b\6\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\27\11\6\0\1\u016c\10\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\u016d\23\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\27\11\6\0\1\u016e\10\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\u016f\23\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\5\11\1\u0170\21\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\12\11\1\u0171\14\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\4\11\1\u0172\22\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\20\11\1\u0173\6\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\16\11\1\u0174\10\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\20\11\1\u0175\6\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\3\11\1\u0176\23\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\5\11\1\u0177\21\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\11\11\1\u0178\15\11\17\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\4\11\1\u0179\22\11\17\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\27\11\17\0\15\11\1\0\1\u017a\1\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\u017b\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\27\11"+
    "\6\0\1\u017c\10\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\20\11\1\u017d\6\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\1\11"+
    "\1\u017e\25\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\14\11\1\u017f\12\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\20\11"+
    "\1\u0180\6\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\5\11\1\u0181\21\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\20\11"+
    "\1\u0182\6\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\3\11\1\u0183\23\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\4\11"+
    "\1\u0184\22\11\17\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\21\11\1\u0185\5\11\17\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\27\11"+
    "\6\0\1\u0186\10\0\15\11\1\0\2\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\12\1\1\11\24\1\7\11\5\1\2\11"+
    "\7\1\1\11\3\1\1\11\13\1\2\11\1\0\1\11"+
    "\1\1\2\11\3\1\1\0\1\11\1\1\1\0\61\1"+
    "\7\11\10\1\1\0\1\11\3\1\1\11\1\0\1\11"+
    "\1\1\1\11\1\1\2\0\73\1\1\0\1\11\13\1"+
    "\1\11\3\1\1\11\1\1\2\11\1\1\1\11\4\1"+
    "\1\11\15\1\1\11\15\1\1\11\16\1\2\11\1\1"+
    "\1\11\5\1\1\11\5\1\1\11\1\1\1\11\4\1"+
    "\1\11\20\1\1\11\6\1\1\11\2\1\1\11\16\1"+
    "\1\11\4\1\1\11\1\1\1\11\15\1\1\11\11\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  Stack<String> jsonStack = new Stack<String>();
  Stack<Integer> state = new Stack<Integer>();
  public boolean textStarted = false;

  public JourneyLexer() {
    this((java.io.Reader)null);
  }


  public void pushState(Integer newState){
      state.push(yystate());
      yybegin(newState);
  }
  public void popState(){
        yybegin(state.pop());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JourneyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 105: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 106: break;
          case 3: 
            { return OP_LT;
            } 
            // fall through
          case 107: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 108: break;
          case 5: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 109: break;
          case 6: 
            { return OP_MINUS;
            } 
            // fall through
          case 110: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 111: break;
          case 8: 
            { return OP_DIVIDE;
            } 
            // fall through
          case 112: break;
          case 9: 
            { return OP_MULTIPLY;
            } 
            // fall through
          case 113: break;
          case 10: 
            { return ASSIGN;
            } 
            // fall through
          case 114: break;
          case 11: 
            { return OP_MOD;
            } 
            // fall through
          case 115: break;
          case 12: 
            { return LBRACE;
            } 
            // fall through
          case 116: break;
          case 13: 
            { return RBRACE;
            } 
            // fall through
          case 117: break;
          case 14: 
            { return LBRACK;
            } 
            // fall through
          case 118: break;
          case 15: 
            { return RBRACK;
            } 
            // fall through
          case 119: break;
          case 16: 
            { return LPAREN;
            } 
            // fall through
          case 120: break;
          case 17: 
            { return RPAREN;
            } 
            // fall through
          case 121: break;
          case 18: 
            { return OP_PLUS;
            } 
            // fall through
          case 122: break;
          case 19: 
            { return OP_GT;
            } 
            // fall through
          case 123: break;
          case 20: 
            { return OP_NOT;
            } 
            // fall through
          case 124: break;
          case 21: 
            { return COLON;
            } 
            // fall through
          case 125: break;
          case 22: 
            { return SEMICOLON;
            } 
            // fall through
          case 126: break;
          case 23: 
            { return COMMA;
            } 
            // fall through
          case 127: break;
          case 24: 
            { return TEXT_LITERAL;
            } 
            // fall through
          case 128: break;
          case 25: 
            { popState();
                                        popState();
                                        return BACKTICK;
            } 
            // fall through
          case 129: break;
          case 26: 
            { pushState(IN_TEXT_TEMPLATE); return BACKTICK;
            } 
            // fall through
          case 130: break;
          case 27: 
            { return OP_LE;
            } 
            // fall through
          case 131: break;
          case 28: 
            { return NAME;
            } 
            // fall through
          case 132: break;
          case 29: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return POSITIVEINTEGERVALUE;
            } 
            // fall through
          case 133: break;
          case 30: 
            { return DOUBLEVALUE ;
            } 
            // fall through
          case 134: break;
          case 31: 
            { return OP_DECREMENT;
            } 
            // fall through
          case 135: break;
          case 32: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 136: break;
          case 33: 
            { return IF;
            } 
            // fall through
          case 137: break;
          case 34: 
            { return TO;
            } 
            // fall through
          case 138: break;
          case 35: 
            { return ON;
            } 
            // fall through
          case 139: break;
          case 36: 
            { return OP_EQUAL;
            } 
            // fall through
          case 140: break;
          case 37: 
            { return FATARROW;
            } 
            // fall through
          case 141: break;
          case 38: 
            { return OP_INCREMENT;
            } 
            // fall through
          case 142: break;
          case 39: 
            { return OP_AND;
            } 
            // fall through
          case 143: break;
          case 40: 
            { return OP_OR;
            } 
            // fall through
          case 144: break;
          case 41: 
            { return OP_GE;
            } 
            // fall through
          case 145: break;
          case 42: 
            { return OP_NOTEQUAL;
            } 
            // fall through
          case 146: break;
          case 43: 
            { pushState(IN_SCRIPLET);return SCRIPLET_START;
            } 
            // fall through
          case 147: break;
          case 44: 
            { popState(); return SCRIPLET_END;
            } 
            // fall through
          case 148: break;
          case 45: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return INETEGERVALUE;
            } 
            // fall through
          case 149: break;
          case 46: 
            { return PUT;
            } 
            // fall through
          case 150: break;
          case 47: 
            { return AND;
            } 
            // fall through
          case 151: break;
          case 48: 
            { return GET;
            } 
            // fall through
          case 152: break;
          case 49: 
            { return URL;
            } 
            // fall through
          case 153: break;
          case 50: 
            { return LET;
            } 
            // fall through
          case 154: break;
          case 51: 
            { return FOR;
            } 
            // fall through
          case 155: break;
          case 52: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 156: break;
          case 53: 
            { return PUSH;
            } 
            // fall through
          case 157: break;
          case 54: 
            { return POST;
            } 
            // fall through
          case 158: break;
          case 55: 
            { return NULLVALUE;
            } 
            // fall through
          case 159: break;
          case 56: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return NOW;
            } 
            // fall through
          case 160: break;
          case 57: 
            { return BOOLEANVALUE;
            } 
            // fall through
          case 161: break;
          case 58: 
            { pushState(IN_TEXT);return TEXT;
            } 
            // fall through
          case 162: break;
          case 59: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return MID;
            } 
            // fall through
          case 163: break;
          case 60: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return MUL;
            } 
            // fall through
          case 164: break;
          case 61: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return MOD;
            } 
            // fall through
          case 165: break;
          case 62: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return ADD;
            } 
            // fall through
          case 166: break;
          case 63: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return DIV;
            } 
            // fall through
          case 167: break;
          case 64: 
            { return LOAD;
            } 
            // fall through
          case 168: break;
          case 65: 
            { return BODY;
            } 
            // fall through
          case 169: break;
          case 66: 
            { return ELSE;
            } 
            // fall through
          case 170: break;
          case 67: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return SUB;
            } 
            // fall through
          case 171: break;
          case 68: 
            { return SYNC;
            } 
            // fall through
          case 172: break;
          case 69: 
            { return WITH;
            } 
            // fall through
          case 173: break;
          case 70: 
            { return FROM;
            } 
            // fall through
          case 174: break;
          case 71: 
            { return FORM;
            } 
            // fall through
          case 175: break;
          case 72: 
            { return PRINT;
            } 
            // fall through
          case 176: break;
          case 73: 
            { return PATCH;
            } 
            // fall through
          case 177: break;
          case 74: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return RPAD;
            } 
            // fall through
          case 178: break;
          case 75: 
            { return ASYNC;
            } 
            // fall through
          case 179: break;
          case 76: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return UUID;
            } 
            // fall through
          case 180: break;
          case 77: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return LPAD;
            } 
            // fall through
          case 181: break;
          case 78: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return LEFT;
            } 
            // fall through
          case 182: break;
          case 79: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return FAKE;
            } 
            // fall through
          case 183: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return RIGHT;
            } 
            // fall through
          case 184: break;
          case 81: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return ROUND;
            } 
            // fall through
          case 185: break;
          case 82: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return ARRAY;
            } 
            // fall through
          case 186: break;
          case 83: 
            { return DELETE;
            } 
            // fall through
          case 187: break;
          case 84: 
            { return LISTEN;
            } 
            // fall through
          case 188: break;
          case 85: 
            { return OBJECT_TEMPLATE;
            } 
            // fall through
          case 189: break;
          case 86: 
            { return STATUS;
            } 
            // fall through
          case 190: break;
          case 87: 
            { return STRING;
            } 
            // fall through
          case 191: break;
          case 88: 
            { return DOUBLE;
            } 
            // fall through
          case 192: break;
          case 89: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return RANDOM;
            } 
            // fall through
          case 193: break;
          case 90: 
            { return RESPOND;
            } 
            // fall through
          case 194: break;
          case 91: 
            { return REQUEST;
            } 
            // fall through
          case 195: break;
          case 92: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return CONCAT;
            } 
            // fall through
          case 196: break;
          case 93: 
            { return HEADERS;
            } 
            // fall through
          case 197: break;
          case 94: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return ENCODE;
            } 
            // fall through
          case 198: break;
          case 95: 
            { return SANDBOX;
            } 
            // fall through
          case 199: break;
          case 96: 
            { return INTEGER;
            } 
            // fall through
          case 200: break;
          case 97: 
            { return BOOL;
            } 
            // fall through
          case 201: break;
          case 98: 
            { return MATCHING;
            } 
            // fall through
          case 202: break;
          case 99: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 8);
            { return CONTAINS;
            } 
            // fall through
          case 203: break;
          case 100: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 9);
            { return TIMESTAMP;
            } 
            // fall through
          case 204: break;
          case 101: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 9);
            { return FROMJSON;
            } 
            // fall through
          case 205: break;
          case 102: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 14);
            { return RANDOMELEMENT;
            } 
            // fall through
          case 206: break;
          case 103: 
            { return POSITIVE_INTEGER;
            } 
            // fall through
          case 207: break;
          case 104: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 22);
            { return UNIQUERANDOMELEMENTS;
            } 
            // fall through
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
