/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.qalens.corr.lang.core.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;import com.intellij.psi.tree.IElementType;
import com.qalens.corr.lang.core.psi.JrnTokenType;import kotlin.reflect.jvm.internal.impl.resolve.constants.LongValue;
import static com.qalens.corr.lang.core.psi.JrnElementTypes.*;
import static com.intellij.psi.TokenType.*;
import java.net.URL;import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Journey.flex</tt>
 */
class JourneyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TEXT_TEMPLATE = 2;
  public static final int IN_SCRIPLET = 4;
  public static final int IN_STRING = 6;
  public static final int IN_TEXT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\5\0\1\16"+
    "\1\17\1\16\2\20\1\21\3\20\1\21\71\20\1\22\1\20\1\23\1\0\1\24\1\25\2\0\16\26"+
    "\1\27\1\30\1\31\1\32\2\20\1\33\11\20\1\34\21\20\1\35\1\36\24\20\1\37\3\20"+
    "\1\21\1\40\1\37\4\20\1\0\1\41\4\26\1\42\1\43\1\0\3\20\2\44\3\0\1\26\1\45\5"+
    "\20\1\46\3\26\1\47\1\50\13\20\1\51\1\52\1\53\1\54\1\26\1\55\2\0\1\56\3\20"+
    "\3\26\1\57\12\20\1\60\1\26\1\61\1\0\1\26\1\62\3\20\1\46\1\63\1\16\2\20\1\60"+
    "\1\64\1\65\1\66\2\0\3\20\1\67\10\0\2\20\1\27\1\70\2\0\1\71\1\26\1\72\3\26"+
    "\1\73\6\20\1\74\2\26\1\75\1\20\1\76\1\26\1\37\1\20\1\77\1\100\1\101\2\20\1"+
    "\102\1\103\1\104\1\52\1\105\1\106\1\107\1\76\1\26\1\23\1\0\1\110\1\111\1\101"+
    "\2\20\1\102\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\26\1\121\1\0\1\110"+
    "\1\34\1\33\2\20\1\102\1\122\1\104\1\42\1\123\1\124\1\0\1\76\1\26\1\0\1\40"+
    "\1\110\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\120\1\107\1\76\1\26"+
    "\1\40\1\0\1\125\1\126\1\127\1\130\1\131\1\126\1\20\1\132\1\133\1\134\1\135"+
    "\1\0\1\120\1\26\2\0\1\136\1\27\1\102\2\20\1\102\1\20\1\137\1\140\1\134\1\141"+
    "\1\44\1\76\1\26\2\0\1\77\1\27\1\102\2\20\1\102\1\142\1\104\1\140\1\134\1\141"+
    "\1\143\1\76\1\26\1\144\1\0\1\110\1\27\1\102\4\20\1\145\1\140\1\146\1\147\1"+
    "\150\1\76\1\26\1\0\1\36\1\151\1\20\1\21\1\36\2\20\1\33\1\152\1\21\1\153\1"+
    "\154\1\26\1\120\1\26\1\155\1\0\1\37\5\20\1\156\1\45\1\157\1\160\1\26\1\161"+
    "\4\0\1\162\1\163\1\164\1\37\1\165\1\166\1\156\1\167\1\170\1\171\1\26\1\172"+
    "\4\0\1\124\2\0\1\161\1\26\1\161\1\173\1\174\1\20\1\37\3\20\1\24\1\41\1\26"+
    "\1\140\1\175\1\26\1\41\3\26\1\176\1\177\7\0\5\20\1\46\1\26\1\200\1\26\1\161"+
    "\1\60\1\201\1\202\1\203\1\204\1\20\1\205\1\206\1\26\1\171\4\20\1\34\1\207"+
    "\5\20\1\210\51\20\1\127\1\21\1\127\5\20\1\127\4\20\1\127\1\21\1\127\1\20\1"+
    "\21\7\20\1\127\10\20\1\211\1\0\1\41\1\161\1\0\2\20\2\0\12\20\2\70\1\37\114"+
    "\20\1\100\2\20\1\37\2\20\1\44\11\20\1\126\1\20\1\124\1\20\1\27\1\212\1\0\2"+
    "\20\1\212\1\0\2\20\1\213\1\0\1\20\1\27\1\214\1\0\6\20\1\215\3\26\1\216\1\217"+
    "\1\26\1\161\3\0\1\220\1\26\1\161\13\20\1\0\5\20\1\221\10\20\1\70\1\0\3\20"+
    "\1\21\1\26\1\222\1\26\1\222\1\120\1\26\3\20\1\70\1\24\1\0\5\20\1\223\3\20"+
    "\1\23\1\26\1\45\4\0\2\20\1\157\1\222\6\20\1\175\1\160\3\26\1\52\1\26\1\161"+
    "\1\26\1\161\1\150\1\0\1\26\1\171\10\0\1\224\5\20\1\215\1\26\1\224\1\223\1"+
    "\26\1\161\1\0\1\225\1\222\1\0\1\226\3\20\1\75\1\203\1\26\1\62\4\20\1\60\1"+
    "\26\1\222\1\0\4\20\1\215\2\26\1\0\1\26\1\227\1\26\1\62\3\20\1\70\1\20\1\124"+
    "\10\0\1\230\2\26\1\231\1\232\1\161\30\20\6\26\1\171\1\225\42\20\2\70\4\20"+
    "\2\70\1\20\1\233\3\20\1\70\6\20\1\27\1\170\1\234\1\24\1\235\1\223\1\20\1\24"+
    "\1\234\1\24\7\0\1\106\1\236\1\0\1\237\3\0\1\40\1\150\2\0\1\20\1\24\6\0\1\26"+
    "\1\176\1\240\1\26\1\236\1\0\1\241\1\36\1\152\1\70\1\25\1\102\1\20\1\242\1"+
    "\243\1\244\2\0\5\20\1\124\116\0\5\20\1\21\5\20\1\21\20\20\1\24\1\245\1\246"+
    "\1\0\4\20\1\34\1\207\7\20\1\150\1\0\1\106\2\20\1\21\1\0\10\21\4\26\1\243\3"+
    "\0\1\37\1\205\1\247\1\24\1\37\11\20\1\21\1\250\1\37\12\20\1\210\1\243\4\20"+
    "\1\70\1\37\12\20\1\21\2\0\3\20\1\44\6\0\170\20\1\70\11\0\72\20\1\70\5\0\21"+
    "\20\1\24\10\0\5\20\1\70\41\20\1\24\2\20\1\26\1\246\2\0\5\20\1\157\1\71\1\251"+
    "\3\20\1\60\12\20\1\161\3\0\1\150\1\20\1\36\14\20\1\101\3\20\1\21\1\20\7\0"+
    "\1\150\1\20\1\252\1\253\2\20\1\46\3\0\6\20\1\223\1\0\1\62\5\20\1\215\1\26"+
    "\1\171\1\0\1\26\1\161\2\26\1\62\1\254\1\26\1\62\2\20\1\60\1\171\2\20\1\157"+
    "\1\26\1\222\1\0\3\20\1\24\1\73\5\20\1\46\1\26\1\236\1\150\1\26\1\161\1\255"+
    "\1\20\1\26\1\256\5\20\1\75\1\160\1\0\1\253\1\257\1\26\1\161\2\20\1\21\1\260"+
    "\6\20\1\202\1\261\1\221\2\0\1\262\1\20\1\46\1\263\1\0\3\264\1\0\2\21\5\20"+
    "\1\210\1\70\1\0\16\20\1\46\1\265\1\26\1\161\64\20\1\223\1\0\2\20\1\21\1\266"+
    "\5\20\1\223\40\0\55\20\1\70\15\20\1\23\4\0\1\21\1\0\1\266\1\267\1\20\1\102"+
    "\1\21\1\170\1\270\15\20\1\23\3\0\1\266\20\20\1\70\1\164\32\20\1\70\2\0\10"+
    "\20\1\36\6\20\5\0\1\20\1\23\2\26\2\0\2\26\1\271\2\0\1\272\4\0\1\273\1\233"+
    "\17\20\1\24\2\0\1\26\1\161\1\37\2\20\1\274\1\37\2\20\1\44\1\275\6\20\1\60"+
    "\3\20\1\21\3\36\1\276\4\0\1\20\1\142\2\20\1\21\2\20\1\277\1\20\1\70\1\20\1"+
    "\70\4\0\17\20\1\44\10\0\6\20\1\24\20\0\1\300\20\0\3\20\1\24\6\20\1\124\1\0"+
    "\1\236\3\0\4\20\2\0\3\20\1\44\4\20\1\60\1\45\3\20\1\70\4\20\1\223\1\20\1\247"+
    "\5\0\23\20\1\70\1\26\1\161\4\20\1\223\4\20\1\223\5\20\1\0\6\20\1\223\23\0"+
    "\46\20\1\21\1\0\2\20\1\70\1\0\1\20\23\0\1\70\1\102\4\20\1\34\1\301\2\20\1"+
    "\70\1\0\2\20\1\21\1\0\3\20\1\21\10\0\2\20\1\302\1\0\2\20\1\70\1\0\3\20\1\23"+
    "\10\0\7\20\1\275\10\0\1\303\1\71\1\142\1\37\2\20\1\223\1\114\4\0\3\20\1\24"+
    "\3\20\1\24\4\0\1\20\1\37\2\20\1\304\3\0\6\20\1\70\1\0\2\20\1\70\1\0\2\20\1"+
    "\44\1\0\2\20\1\23\15\0\11\20\1\124\6\0\6\20\1\44\1\0\6\20\1\44\41\0\1\226"+
    "\6\20\1\26\1\160\3\0\1\120\1\26\1\0\1\106\1\226\5\20\1\26\1\45\2\0\3\20\1"+
    "\124\1\26\1\161\1\226\3\20\1\157\1\26\1\140\1\26\2\0\4\20\1\305\1\0\1\226"+
    "\5\20\1\46\1\26\1\306\1\307\1\26\1\310\4\0\2\20\1\33\2\20\1\215\1\26\1\177"+
    "\10\0\1\21\1\311\1\20\1\34\1\20\1\124\5\20\1\157\1\26\1\45\1\26\1\161\1\136"+
    "\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\135\1\243\1\76\2\176\21\0"+
    "\6\20\1\175\1\26\1\200\1\44\1\26\1\161\4\0\6\20\2\26\1\312\1\0\1\26\1\161"+
    "\24\0\5\20\1\157\1\171\1\26\1\236\2\0\1\257\4\0\6\20\2\26\1\313\1\0\1\26\1"+
    "\161\4\0\5\20\1\46\1\26\1\0\1\26\1\161\6\0\3\20\1\314\1\26\1\222\1\26\1\161"+
    "\54\0\10\20\1\26\1\161\1\0\1\150\70\0\7\20\1\124\40\0\1\20\1\102\3\20\1\157"+
    "\1\160\1\26\1\124\1\0\1\26\1\161\2\0\1\36\3\20\1\315\2\26\1\41\1\160\51\0"+
    "\63\20\1\23\14\0\15\20\1\21\2\0\30\20\1\223\27\0\5\20\1\21\72\0\10\20\1\21"+
    "\67\0\7\20\1\124\3\20\1\21\1\26\1\161\14\0\3\20\1\70\1\176\1\0\6\20\1\160"+
    "\1\0\1\223\1\0\1\26\1\161\1\266\2\20\1\243\2\20\56\0\10\20\1\24\1\0\1\75\4"+
    "\26\1\160\1\0\1\106\1\226\1\20\10\0\1\124\3\0\75\20\1\24\2\0\36\20\1\44\41"+
    "\0\1\23\77\0\15\20\1\44\1\20\1\24\1\20\1\124\1\20\1\316\130\0\1\272\1\317"+
    "\1\45\1\225\1\320\1\222\3\0\1\321\22\0\1\307\67\0\12\20\1\27\10\20\1\27\1"+
    "\322\1\323\1\20\1\324\1\142\7\20\1\34\1\325\2\27\3\20\1\326\1\170\1\36\1\102"+
    "\51\20\1\70\3\20\1\102\2\20\1\210\3\20\1\210\2\20\1\27\3\20\1\27\2\20\1\21"+
    "\3\20\1\21\3\20\1\102\3\20\1\102\2\20\1\210\1\327\14\26\1\160\1\225\5\26\1"+
    "\176\1\300\1\0\1\237\2\0\1\225\1\41\1\26\52\0\1\160\2\26\1\330\1\331\1\45"+
    "\72\0\30\20\1\24\1\0\1\160\5\0\10\20\1\215\1\45\1\26\1\161\24\0\1\142\3\20"+
    "\1\162\1\37\1\210\1\332\1\241\1\333\1\162\1\233\1\162\2\210\1\117\1\20\1\33"+
    "\1\20\1\223\1\334\1\33\1\20\1\223\50\0\32\20\1\21\5\0\106\20\1\24\1\0\33\20"+
    "\1\70\120\20\1\23\53\0\3\20\1\70\134\0\36\26\2\0");

  /* The ZZ_CMAP_A table has 1768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\2\0\1\2\2\0\1\3\1\60\1\11\2\0\1\50\2\0\1\55\1\56\1\17\1\57\1"+
    "\100\1\14\1\15\1\16\1\13\11\12\1\61\1\62\1\4\1\47\1\63\2\0\1\71\1\77\2\6\1"+
    "\70\1\65\2\6\1\76\2\6\1\72\3\6\1\74\1\6\1\66\1\73\1\64\1\67\5\6\1\53\1\5\1"+
    "\54\1\0\1\101\1\10\1\26\1\35\1\27\1\32\1\40\1\44\1\31\1\30\1\22\1\46\1\102"+
    "\1\34\1\25\1\23\1\36\1\20\1\42\1\21\1\41\1\24\1\33\1\75\1\43\1\45\1\37\1\6"+
    "\1\51\1\0\1\52\4\0\1\6\12\0\1\6\1\0\1\7\17\6\1\0\2\6\4\0\4\6\6\0\5\6\7\0\1"+
    "\6\1\0\1\6\1\0\10\7\5\6\1\0\2\6\3\0\3\6\1\0\1\6\6\0\1\6\1\7\3\6\1\0\1\6\1"+
    "\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\7\0\15\7\1\0\1\7\1"+
    "\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\3\7\5\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7"+
    "\7\2\0\6\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\2\6\1\7\6\6\3\7\2\0\11\6\3\7\1"+
    "\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\6"+
    "\6\6\0\6\7\1\0\11\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\6\3\7\1\0\10"+
    "\6\2\0\2\6\2\0\6\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\3\7\2\0\3\7\1\6\10"+
    "\0\1\7\4\0\2\6\1\0\1\6\1\0\3\7\1\0\6\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1"+
    "\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4"+
    "\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\5\7\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\1\0\4\6\1\0\3\6\6\0\1\6\2\0\2"+
    "\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\5\0\3\6\1\7\7\0\1\6\2\0\2\7\1\0\7\6\1\0"+
    "\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\1\6\5\7\7\6\10\7\1\0\2\7"+
    "\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2"+
    "\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\10\7\11\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\5\0\1\6\2\0\3\6\1\0\7\6\2\0\3\7\2\6"+
    "\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\4\0\1\6\1\7\5\0\3\7"+
    "\2\0\1\6\1\7\1\6\5\0\4\7\4\0\4\6\4\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7"+
    "\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6"+
    "\6\2\0\2\6\1\7\13\0\1\7\4\0\1\7\3\0\3\7\2\0\1\6\4\0\3\6\2\0\4\6\5\0\5\6\4"+
    "\0\1\6\4\0\4\6\3\7\2\6\5\0\5\6\3\0\2\7\2\0\3\6\6\7\1\0\3\6\1\7\3\6\1\7\4\6"+
    "\1\7\4\6\3\0\1\6\1\0\1\6\2\0\5\6\1\7\2\6\2\7\5\6\1\0\4\6\2\7\4\0\1\6\3\7\2"+
    "\6\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5\0\5\6\5\0\1\6"+
    "\1\7\3\6\1\0\2\6\1\0\2\6\3\0\2\7\10\0\3\7\1\0\1\6\1\0\1\6\3\0\4\6\4\0\1\7"+
    "\6\0\2\6\2\0\3\6\3\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\1\6\3\0\1\6\2\0\4\6\1"+
    "\0\2\6\2\0\1\6\3\7\1\0\2\7\1\0\5\6\2\7\1\0\3\6\1\7\2\0\1\6\1\0\1\7\4\6\5\0"+
    "\3\7\3\0\2\7\1\6\1\0\1\6\3\0\1\6\1\0\4\6\1\0\1\6\4\7\2\6\1\0\1\6\1\7\3\0\1"+
    "\6\3\0\2\6\3\0\3\7\2\0\6\7\2\6\3\0\2\7\1\0\2\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0"+
    "\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2\0\3"+
    "\7\2\0\7\7\1\0\2\7\1\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6"+
    "\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\23\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\1\1\22\1\23"+
    "\6\3\1\24\1\25\2\1\1\26\11\3\1\1\1\12"+
    "\1\27\1\0\1\30\2\4\2\31\1\32\1\31\1\0"+
    "\1\33\1\34\1\0\11\3\1\35\4\3\1\36\24\3"+
    "\1\37\13\3\1\40\1\41\1\42\1\43\7\3\1\0"+
    "\1\44\3\3\1\45\1\0\2\46\2\34\2\0\2\3"+
    "\1\47\21\3\1\50\4\3\1\51\2\3\1\52\4\3"+
    "\1\53\15\3\1\54\7\3\1\54\1\0\1\55\2\3"+
    "\1\56\1\57\6\3\1\60\1\61\1\62\1\3\1\63"+
    "\1\64\1\3\1\65\1\66\1\67\4\3\1\70\4\3"+
    "\1\71\1\3\1\72\2\3\1\73\2\3\1\74\1\75"+
    "\1\76\1\77\1\3\1\100\5\3\1\101\1\102\1\103"+
    "\7\3\1\104\4\3\1\105\1\106\1\3\1\107\5\3"+
    "\1\110\4\3\1\111\1\3\1\112\7\3\1\113\1\114"+
    "\1\115\1\3\1\116\2\3\1\117\3\3\1\120\1\3"+
    "\1\121\1\122\3\3\1\123\1\124\1\125\1\126\2\3"+
    "\1\127\1\130\2\3\1\131\5\3\1\132\3\3\1\133"+
    "\1\134\11\3\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u014f"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u014f\0\u014f\0\u014f\0\u014f"+
    "\0\u014f\0\u014f\0\u014f\0\u0929\0\u096c\0\u014f\0\u014f\0\u09af"+
    "\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u014f\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u014f\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59"+
    "\0\u0d9c\0\u0ddf\0\u0e22\0\u08e6\0\u0e65\0\u014f\0\u0218\0\u014f"+
    "\0\u0ea8\0\u014f\0\u014f\0\u029e\0\u0367\0\u0eeb\0\u0f2e\0\u014f"+
    "\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u01d5\0\u1252\0\u1295\0\u12d8\0\u131b"+
    "\0\u01d5\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708"+
    "\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u01d5\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5"+
    "\0\u1b38\0\u014f\0\u014f\0\u014f\0\u014f\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u0bc7\0\u014f\0\u1d50\0\u1d93"+
    "\0\u1dd6\0\u014f\0\u0eeb\0\u014f\0\u0f2e\0\u014f\0\u1e19\0\u1e5c"+
    "\0\u1e9f\0\u1ee2\0\u1f25\0\u01d5\0\u1f68\0\u1fab\0\u1fee\0\u2031"+
    "\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249"+
    "\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u01d5\0\u23db\0\u241e"+
    "\0\u2461\0\u24a4\0\u01d5\0\u24e7\0\u252a\0\u01d5\0\u256d\0\u25b0"+
    "\0\u25f3\0\u2636\0\u01d5\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785"+
    "\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d"+
    "\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5"+
    "\0\u01d5\0\u2bf8\0\u014f\0\u2c3b\0\u2c7e\0\u01d5\0\u01d5\0\u2cc1"+
    "\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u01d5\0\u014f\0\u01d5"+
    "\0\u2e53\0\u01d5\0\u014f\0\u2e96\0\u014f\0\u014f\0\u014f\0\u2ed9"+
    "\0\u2f1c\0\u2f5f\0\u2fa2\0\u014f\0\u2fe5\0\u3028\0\u306b\0\u30ae"+
    "\0\u01d5\0\u30f1\0\u01d5\0\u3134\0\u3177\0\u01d5\0\u31ba\0\u31fd"+
    "\0\u014f\0\u01d5\0\u01d5\0\u3240\0\u3283\0\u01d5\0\u32c6\0\u3309"+
    "\0\u334c\0\u338f\0\u3240\0\u01d5\0\u01d5\0\u014f\0\u33d2\0\u3415"+
    "\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u01d5\0\u35a7\0\u35ea"+
    "\0\u362d\0\u3670\0\u014f\0\u014f\0\u36b3\0\u014f\0\u36f6\0\u3739"+
    "\0\u377c\0\u37bf\0\u3802\0\u014f\0\u3845\0\u3888\0\u38cb\0\u390e"+
    "\0\u014f\0\u3951\0\u014f\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0"+
    "\0\u3ae3\0\u3b26\0\u01d5\0\u01d5\0\u01d5\0\u3b69\0\u01d5\0\u3bac"+
    "\0\u3bef\0\u01d5\0\u3c32\0\u3c75\0\u3cb8\0\u014f\0\u3cfb\0\u01d5"+
    "\0\u01d5\0\u3d3e\0\u3d81\0\u3dc4\0\u014f\0\u01d5\0\u014f\0\u01d5"+
    "\0\u3e07\0\u3e4a\0\u01d5\0\u01d5\0\u3e8d\0\u3ed0\0\u01d5\0\u3f13"+
    "\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u014f\0\u4062\0\u40a5\0\u40e8"+
    "\0\u014f\0\u014f\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a"+
    "\0\u42bd\0\u4300\0\u4343\0\u014f\0\u01d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\3\7\2\6\1\10\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\10\1\40\1\41\1\10"+
    "\1\42\1\43\2\10\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\6"+
    "\1\60\1\61\5\10\1\62\1\63\1\10\1\64\1\65"+
    "\1\66\2\10\4\67\1\70\1\71\2\67\1\72\72\67"+
    "\1\6\3\7\2\6\1\10\2\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\10\1\73\1\23\1\24"+
    "\1\74\1\75\1\76\1\30\2\10\1\77\1\100\1\101"+
    "\3\10\1\40\1\102\2\10\1\103\2\10\1\104\1\105"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\6\1\60\1\61\5\10\1\62\1\63"+
    "\1\10\1\64\1\65\1\66\2\10\104\6\3\7\4\6"+
    "\1\106\72\6\104\0\3\7\105\0\2\10\2\0\2\10"+
    "\4\0\27\10\15\0\14\10\1\0\2\10\10\107\1\110"+
    "\72\107\5\12\1\111\3\12\1\112\71\12\12\113\2\114"+
    "\1\113\1\115\77\113\2\116\1\113\1\115\65\113\12\0"+
    "\1\117\1\0\1\120\100\0\2\115\105\0\1\121\1\122"+
    "\71\0\2\10\2\0\2\10\4\0\1\10\1\123\4\10"+
    "\1\124\4\10\1\125\2\10\1\126\10\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\1\127"+
    "\1\10\1\130\3\10\1\131\7\10\1\132\1\10\1\133"+
    "\6\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\24\10\1\134\2\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\13\10\1\135"+
    "\2\10\1\136\10\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\1\10\1\137\1\140\13\10"+
    "\1\141\1\10\1\142\6\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\2\10\1\143\3\10"+
    "\1\144\4\10\1\145\2\10\1\146\10\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\3\10"+
    "\1\147\6\10\1\150\6\10\1\151\5\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\16\10"+
    "\1\152\10\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\20\10\1\153\6\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\20\10"+
    "\1\154\6\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\2\10\1\155\15\10\1\156\6\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\1\10\1\157\11\10\1\160\13\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\1\161"+
    "\1\10\1\162\13\10\1\163\1\10\1\164\6\10\15\0"+
    "\14\10\1\0\2\10\6\0\2\10\2\0\2\10\4\0"+
    "\16\10\1\165\10\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\3\10\1\166\11\10\1\167"+
    "\11\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\3\10\1\170\10\10\1\171\12\10\15\0"+
    "\14\10\1\0\2\10\6\0\2\10\2\0\2\10\4\0"+
    "\4\10\1\172\1\10\1\173\4\10\1\174\3\10\1\175"+
    "\7\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\2\10\1\176\24\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\1\10\1\177"+
    "\4\10\1\200\7\10\1\201\10\10\15\0\14\10\1\0"+
    "\2\10\47\0\1\202\13\0\1\203\76\0\1\204\72\0"+
    "\1\205\41\0\2\10\2\0\2\10\4\0\1\10\1\137"+
    "\25\10\15\0\2\10\1\206\11\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\6\10\1\207\20\10\15\0"+
    "\5\10\1\210\6\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\4\10\1\211\22\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\16\10\1\212"+
    "\10\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\3\10\1\213\23\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\16\10\1\214"+
    "\10\10\15\0\14\10\1\0\2\10\4\67\1\0\1\215"+
    "\2\67\1\0\72\67\50\0\1\216\36\0\2\67\2\0"+
    "\1\67\100\0\2\10\2\0\2\10\4\0\1\127\1\10"+
    "\1\130\3\10\1\131\7\10\1\132\10\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\1\10"+
    "\1\137\1\140\24\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\2\10\1\143\10\10\1\145"+
    "\2\10\1\146\10\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\12\10\1\150\14\10\15\0"+
    "\14\10\1\0\2\10\6\0\2\10\2\0\2\10\4\0"+
    "\2\10\1\155\24\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\13\10\1\160\13\10\15\0"+
    "\14\10\1\0\2\10\6\0\2\10\2\0\2\10\4\0"+
    "\1\161\17\10\1\217\6\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\13\10\1\174\13\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\1\10\1\220\4\10\1\200\7\10\1\221\10\10"+
    "\15\0\14\10\1\0\2\10\63\0\1\222\17\0\1\12"+
    "\2\0\100\12\12\0\2\223\1\0\1\115\65\0\12\224"+
    "\2\225\1\224\1\0\65\224\1\121\1\226\1\227\100\121"+
    "\17\230\1\231\63\230\6\0\2\10\2\0\2\10\4\0"+
    "\2\10\1\232\24\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\4\10\1\233\22\10\15\0"+
    "\14\10\1\0\2\10\6\0\2\10\2\0\2\10\4\0"+
    "\4\10\1\234\14\10\1\235\5\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\21\10\1\236"+
    "\5\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\6\10\1\237\20\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\11\10\1\240"+
    "\15\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\3\10\1\241\23\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\13\10\1\242"+
    "\13\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\21\10\1\243\1\244\4\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\14\10"+
    "\1\245\12\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\23\10\1\246\3\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\13\10"+
    "\1\247\13\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\5\10\1\250\21\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\25\10"+
    "\1\251\1\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\12\10\1\252\14\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\4\10"+
    "\1\253\22\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\14\10\1\254\12\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\12\10"+
    "\1\255\14\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\12\10\1\256\14\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\12\10"+
    "\1\257\14\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\17\10\1\260\7\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\3\10"+
    "\1\261\23\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\6\10\1\262\20\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\4\10"+
    "\1\263\22\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\27\10\15\0\11\10\1\264\2\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\14\10"+
    "\1\265\12\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\14\10\1\266\12\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\2\10"+
    "\1\267\24\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\6\10\1\270\20\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\21\10"+
    "\1\271\5\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\6\10\1\272\20\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\4\10"+
    "\1\273\17\10\1\274\2\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\12\10\1\275\14\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\26\10\1\276\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\7\10\1\277\17\10\15\0"+
    "\14\10\1\0\2\10\6\0\2\10\2\0\2\10\4\0"+
    "\21\10\1\300\5\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\6\10\1\301\20\10\15\0"+
    "\14\10\1\0\2\10\6\0\2\10\2\0\2\10\4\0"+
    "\3\10\1\302\23\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\15\10\1\303\11\10\15\0"+
    "\14\10\1\0\2\10\6\0\2\10\2\0\2\10\4\0"+
    "\3\10\1\304\23\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\4\10\1\305\22\10\15\0"+
    "\14\10\1\0\2\10\6\0\2\10\2\0\2\10\4\0"+
    "\16\10\1\306\10\10\15\0\14\10\1\0\2\10\6\0"+
    "\2\10\2\0\2\10\4\0\14\10\1\307\12\10\15\0"+
    "\14\10\1\0\1\10\1\310\6\0\2\10\2\0\2\10"+
    "\4\0\1\10\1\311\25\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\27\10\15\0\3\10"+
    "\1\312\10\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\14\10\1\307\12\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\27\10\15\0\6\10"+
    "\1\313\5\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\1\10\1\314\25\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\21\10\1\315\5\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\4\10\1\316\22\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\16\10\1\317\10\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\24\10\1\274\2\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\16\10\1\320\10\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\1\10\1\321\25\10\15\0\14\10\1\0\2\10"+
    "\1\0\1\226\101\0\17\230\1\322\63\230\16\0\1\323"+
    "\1\231\71\0\2\10\2\0\2\10\4\0\3\10\1\324"+
    "\23\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\7\10\1\325\17\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\10\10\1\326"+
    "\16\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\4\10\1\327\22\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\12\10\1\330"+
    "\14\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\10\10\1\331\16\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\12\10\1\332"+
    "\14\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\3\10\1\333\23\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\1\334\26\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\13\10\1\335\13\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\14\10\1\336\12\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\27\10\6\0\1\337\6\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\20\10\1\340\6\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\20\10\1\341\6\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\4\10\1\342\22\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\27\10\6\0\1\343\6\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\7\10\1\344\17\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\27\10\6\0\1\345\6\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\27\10\6\0\1\346"+
    "\6\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\27\10\6\0\1\347\6\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\3\10\1\350\23\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\4\10\1\351\2\10\1\352\17\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\12\10"+
    "\1\353\14\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\27\10\6\0\1\354\6\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\20\10"+
    "\1\355\6\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\12\10\1\356\14\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\12\10"+
    "\1\357\14\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\4\10\1\360\22\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\12\10"+
    "\1\361\14\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\4\10\1\362\22\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\17\10"+
    "\1\363\7\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\20\10\1\364\6\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\16\10"+
    "\1\365\10\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\20\10\1\366\6\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\4\10"+
    "\1\367\22\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\12\10\1\370\14\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\27\10"+
    "\6\0\1\371\6\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\7\10\1\372\17\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\10\10"+
    "\1\373\16\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\5\10\1\374\21\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\21\10"+
    "\1\247\5\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\20\10\1\375\6\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\5\10"+
    "\1\376\21\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\27\10\15\0\4\10\1\340\7\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\27\10"+
    "\15\0\7\10\1\312\4\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\2\10\1\377\24\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\2\10"+
    "\1\u0100\24\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\20\10\1\u0101\6\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\14\10"+
    "\1\u0102\12\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\5\10\1\u0103\21\10\15\0\14\10"+
    "\1\0\2\10\16\230\1\323\1\322\63\230\6\0\2\10"+
    "\2\0\2\10\4\0\4\10\1\u0104\22\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\10\10"+
    "\1\u0105\16\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\27\10\6\0\1\u0106\6\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\4\10"+
    "\1\u0107\22\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\16\10\1\u0108\10\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\12\10"+
    "\1\u0109\14\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\16\10\1\u010a\10\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\20\10"+
    "\1\u010b\6\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\21\10\1\u010c\5\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\10\10"+
    "\1\u010d\16\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\7\10\1\u010e\17\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\6\10"+
    "\1\u010f\20\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\6\10\1\u0110\20\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\20\10"+
    "\1\u0111\6\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\4\10\1\u0112\22\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\27\10"+
    "\6\0\1\u0113\6\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\27\10\6\0\1\u0114\6\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\20\10"+
    "\1\u0115\6\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\27\10\6\0\1\u0116\6\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\7\10"+
    "\1\u0117\17\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\12\10\1\u0118\14\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\13\10"+
    "\1\u0119\13\10\15\0\14\10\1\0\2\10\6\0\2\10"+
    "\2\0\2\10\4\0\15\10\1\u011a\11\10\15\0\14\10"+
    "\1\0\2\10\6\0\2\10\2\0\2\10\4\0\27\10"+
    "\15\0\14\10\1\0\1\u011b\1\10\6\0\2\10\2\0"+
    "\2\10\4\0\27\10\6\0\1\u011c\6\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\3\10\1\u011d"+
    "\23\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\4\10\1\u011e\22\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\11\10\1\u011f"+
    "\15\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\20\10\1\u0120\6\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\27\10\6\0"+
    "\1\u0121\6\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\5\10\1\u0122\21\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\27\10\6\0"+
    "\1\u0123\6\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\3\10\1\u0124\23\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\21\10\1\u0125"+
    "\5\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\4\10\1\u0126\22\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\2\10\1\u0127"+
    "\24\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\2\10\1\u0128\24\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\4\10\1\u0129"+
    "\22\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\1\10\1\u012a\25\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\20\10\1\u012b"+
    "\6\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\3\10\1\u012c\23\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\4\10\1\u012d"+
    "\22\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\20\10\1\u012e\6\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\21\10\1\u012f"+
    "\5\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\16\10\1\u0130\10\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\26\10\1\u0131"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\11\10\1\u0132\15\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\2\10\1\u0133\24\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\20\10\1\u0134\6\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\6\10\1\u0135\20\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\27\10\6\0\1\u0136\6\0\14\10\1\0\1\u0137"+
    "\1\10\6\0\2\10\2\0\2\10\4\0\12\10\1\u0138"+
    "\14\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\4\10\1\u0139\22\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\6\10\1\u013a"+
    "\20\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\3\10\1\u013b\23\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\3\10\1\u013c"+
    "\23\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\27\10\6\0\1\u013d\6\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\21\10\1\u013e"+
    "\5\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\27\10\6\0\1\u013f\6\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\25\10\1\u0140"+
    "\1\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\21\10\1\u0141\5\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\27\10\15\0"+
    "\11\10\1\u0142\2\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\1\10\1\u0143\25\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\3\10\1\u0144"+
    "\23\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\20\10\1\u0145\6\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\5\10\1\u0146"+
    "\21\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\11\10\1\u0147\15\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\21\10\1\u0148"+
    "\5\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\16\10\1\u0149\10\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\20\10\1\u014a"+
    "\6\10\15\0\14\10\1\0\2\10\6\0\2\10\2\0"+
    "\2\10\4\0\14\10\1\u014b\12\10\15\0\14\10\1\0"+
    "\2\10\6\0\2\10\2\0\2\10\4\0\1\u014c\26\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\27\10\6\0\1\u014d\6\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\3\10\1\u014e\23\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\27\10\15\0\12\10\1\u014f\1\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\20\10\1\u0150\6\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\27\10\6\0\1\u0151\6\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\27\10\6\0\1\u0152"+
    "\6\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\3\10\1\u0153\23\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\5\10\1\u0154\21\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\4\10\1\u0155\22\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\20\10\1\u0156\6\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\20\10\1\u0157\6\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\3\10\1\u0158\23\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\11\10\1\u0159\15\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\4\10\1\u015a\22\10"+
    "\15\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\20\10\1\u015b\6\10\15\0\14\10\1\0\2\10"+
    "\6\0\2\10\2\0\2\10\4\0\27\10\6\0\1\u015c"+
    "\6\0\14\10\1\0\2\10\6\0\2\10\2\0\2\10"+
    "\4\0\1\10\1\u015d\25\10\15\0\14\10\1\0\2\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17286];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\11\1\1\11\24\1\7\11\2\1\2\11"+
    "\6\1\1\11\3\1\1\11\13\1\1\11\1\0\1\11"+
    "\1\1\2\11\3\1\1\0\1\11\1\1\1\0\57\1"+
    "\4\11\7\1\1\0\1\11\3\1\1\11\1\0\1\11"+
    "\1\1\1\11\1\1\2\0\70\1\1\0\1\11\13\1"+
    "\1\11\3\1\1\11\1\1\3\11\4\1\1\11\14\1"+
    "\1\11\14\1\1\11\14\1\2\11\1\1\1\11\5\1"+
    "\1\11\4\1\1\11\1\1\1\11\22\1\1\11\6\1"+
    "\1\11\1\1\1\11\15\1\1\11\3\1\2\11\11\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  Stack<String> jsonStack = new Stack<String>();
  Stack<Integer> state = new Stack<Integer>();
  public boolean textStarted = false;

  public JourneyLexer() {
    this((java.io.Reader)null);
  }


  public void pushState(Integer newState){
      state.push(yystate());
      yybegin(newState);
  }
  public void popState(){
        yybegin(state.pop());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JourneyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 95: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 96: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 97: break;
          case 4: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 98: break;
          case 5: 
            { return OP_MINUS;
            } 
            // fall through
          case 99: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 100: break;
          case 7: 
            { return OP_DIVIDE;
            } 
            // fall through
          case 101: break;
          case 8: 
            { return OP_MULTIPLY;
            } 
            // fall through
          case 102: break;
          case 9: 
            { return ASSIGN;
            } 
            // fall through
          case 103: break;
          case 10: 
            { return OP_MOD;
            } 
            // fall through
          case 104: break;
          case 11: 
            { return LBRACE;
            } 
            // fall through
          case 105: break;
          case 12: 
            { return RBRACE;
            } 
            // fall through
          case 106: break;
          case 13: 
            { return LBRACK;
            } 
            // fall through
          case 107: break;
          case 14: 
            { return RBRACK;
            } 
            // fall through
          case 108: break;
          case 15: 
            { return LPAREN;
            } 
            // fall through
          case 109: break;
          case 16: 
            { return RPAREN;
            } 
            // fall through
          case 110: break;
          case 17: 
            { return OP_PLUS;
            } 
            // fall through
          case 111: break;
          case 18: 
            { return COLON;
            } 
            // fall through
          case 112: break;
          case 19: 
            { return SEMICOLON;
            } 
            // fall through
          case 113: break;
          case 20: 
            { return COMMA;
            } 
            // fall through
          case 114: break;
          case 21: 
            { return TEXT_LITERAL;
            } 
            // fall through
          case 115: break;
          case 22: 
            { popState();
                                        popState();
                                        return BACKTICK;
            } 
            // fall through
          case 116: break;
          case 23: 
            { pushState(IN_TEXT_TEMPLATE); return BACKTICK;
            } 
            // fall through
          case 117: break;
          case 24: 
            { return NAME;
            } 
            // fall through
          case 118: break;
          case 25: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return POSITIVEINTEGERVALUE;
            } 
            // fall through
          case 119: break;
          case 26: 
            { return DOUBLEVALUE ;
            } 
            // fall through
          case 120: break;
          case 27: 
            { return OP_DECREMENT;
            } 
            // fall through
          case 121: break;
          case 28: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 122: break;
          case 29: 
            { return IF;
            } 
            // fall through
          case 123: break;
          case 30: 
            { return TO;
            } 
            // fall through
          case 124: break;
          case 31: 
            { return ON;
            } 
            // fall through
          case 125: break;
          case 32: 
            { return OP_EQUAL;
            } 
            // fall through
          case 126: break;
          case 33: 
            { return FATARROW;
            } 
            // fall through
          case 127: break;
          case 34: 
            { return OP_INCREMENT;
            } 
            // fall through
          case 128: break;
          case 35: 
            { return OP_NOTEQUAL;
            } 
            // fall through
          case 129: break;
          case 36: 
            { pushState(IN_SCRIPLET);return SCRIPLET_START;
            } 
            // fall through
          case 130: break;
          case 37: 
            { popState(); return SCRIPLET_END;
            } 
            // fall through
          case 131: break;
          case 38: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return INETEGERVALUE;
            } 
            // fall through
          case 132: break;
          case 39: 
            { return PUT;
            } 
            // fall through
          case 133: break;
          case 40: 
            { return AND;
            } 
            // fall through
          case 134: break;
          case 41: 
            { return GET;
            } 
            // fall through
          case 135: break;
          case 42: 
            { return URL;
            } 
            // fall through
          case 136: break;
          case 43: 
            { return LET;
            } 
            // fall through
          case 137: break;
          case 44: 
            { return FOR;
            } 
            // fall through
          case 138: break;
          case 45: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 139: break;
          case 46: 
            { return PUSH;
            } 
            // fall through
          case 140: break;
          case 47: 
            { return POST;
            } 
            // fall through
          case 141: break;
          case 48: 
            { return NULLVALUE;
            } 
            // fall through
          case 142: break;
          case 49: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return NOW;
            } 
            // fall through
          case 143: break;
          case 50: 
            { return BOOLEANVALUE;
            } 
            // fall through
          case 144: break;
          case 51: 
            { pushState(IN_TEXT);return TEXT;
            } 
            // fall through
          case 145: break;
          case 52: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return MID;
            } 
            // fall through
          case 146: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return MUL;
            } 
            // fall through
          case 147: break;
          case 54: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return MOD;
            } 
            // fall through
          case 148: break;
          case 55: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return ADD;
            } 
            // fall through
          case 149: break;
          case 56: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return DIV;
            } 
            // fall through
          case 150: break;
          case 57: 
            { return LOAD;
            } 
            // fall through
          case 151: break;
          case 58: 
            { return BODY;
            } 
            // fall through
          case 152: break;
          case 59: 
            { return ELSE;
            } 
            // fall through
          case 153: break;
          case 60: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return SUB;
            } 
            // fall through
          case 154: break;
          case 61: 
            { return SYNC;
            } 
            // fall through
          case 155: break;
          case 62: 
            { return WITH;
            } 
            // fall through
          case 156: break;
          case 63: 
            { return FROM;
            } 
            // fall through
          case 157: break;
          case 64: 
            { return FORM;
            } 
            // fall through
          case 158: break;
          case 65: 
            { return PRINT;
            } 
            // fall through
          case 159: break;
          case 66: 
            { return PATCH;
            } 
            // fall through
          case 160: break;
          case 67: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return RPAD;
            } 
            // fall through
          case 161: break;
          case 68: 
            { return ASYNC;
            } 
            // fall through
          case 162: break;
          case 69: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return UUID;
            } 
            // fall through
          case 163: break;
          case 70: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return LPAD;
            } 
            // fall through
          case 164: break;
          case 71: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return LEFT;
            } 
            // fall through
          case 165: break;
          case 72: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return FAKE;
            } 
            // fall through
          case 166: break;
          case 73: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return RIGHT;
            } 
            // fall through
          case 167: break;
          case 74: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return ROUND;
            } 
            // fall through
          case 168: break;
          case 75: 
            { return DELETE;
            } 
            // fall through
          case 169: break;
          case 76: 
            { return LISTEN;
            } 
            // fall through
          case 170: break;
          case 77: 
            { return OBJECT_TEMPLATE;
            } 
            // fall through
          case 171: break;
          case 78: 
            { return STATUS;
            } 
            // fall through
          case 172: break;
          case 79: 
            { return STRING;
            } 
            // fall through
          case 173: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return RANDOM;
            } 
            // fall through
          case 174: break;
          case 81: 
            { return RESPOND;
            } 
            // fall through
          case 175: break;
          case 82: 
            { return REQUEST;
            } 
            // fall through
          case 176: break;
          case 83: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return CONCAT;
            } 
            // fall through
          case 177: break;
          case 84: 
            { return HEADERS;
            } 
            // fall through
          case 178: break;
          case 85: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return ENCODE;
            } 
            // fall through
          case 179: break;
          case 86: 
            { return SANDBOX;
            } 
            // fall through
          case 180: break;
          case 87: 
            { return INTEGER;
            } 
            // fall through
          case 181: break;
          case 88: 
            { return BOOL;
            } 
            // fall through
          case 182: break;
          case 89: 
            { return MATCHING;
            } 
            // fall through
          case 183: break;
          case 90: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 8);
            { return CONTAINS;
            } 
            // fall through
          case 184: break;
          case 91: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 9);
            { return TIMESTAMP;
            } 
            // fall through
          case 185: break;
          case 92: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 9);
            { return FROMJSON;
            } 
            // fall through
          case 186: break;
          case 93: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 14);
            { return RANDOMELEMENT;
            } 
            // fall through
          case 187: break;
          case 94: 
            { return POSITIVE_INTEGER;
            } 
            // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
