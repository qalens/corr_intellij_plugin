/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.qalens.corr.lang.core.jrn.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;import com.intellij.psi.tree.IElementType;
import com.qalens.corr.lang.core.jrn.psi.JrnTokenType;
import static com.qalens.corr.lang.core.jrn.psi.JrnElementTypes.*;
import static com.intellij.psi.TokenType.*;
import java.net.URL;import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Journey.flex</tt>
 */
class JourneyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TEXT_TEMPLATE = 2;
  public static final int IN_SCRIPLET = 4;
  public static final int IN_STRING = 6;
  public static final int IN_TEXT = 8;
  public static final int IN_ALT_SCRIPLET = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\5\0\1\16"+
    "\1\17\1\16\2\20\1\21\3\20\1\21\71\20\1\22\1\20\1\23\1\0\1\24\1\25\2\0\16\26"+
    "\1\27\1\30\1\31\1\32\2\20\1\33\11\20\1\34\21\20\1\35\1\36\24\20\1\37\3\20"+
    "\1\21\1\40\1\37\4\20\1\0\1\41\4\26\1\42\1\43\1\0\3\20\2\44\3\0\1\26\1\45\5"+
    "\20\1\46\3\26\1\47\1\50\13\20\1\51\1\52\1\53\1\54\1\26\1\55\2\0\1\56\3\20"+
    "\3\26\1\57\12\20\1\60\1\26\1\61\1\0\1\26\1\62\3\20\1\46\1\63\1\16\2\20\1\60"+
    "\1\64\1\65\1\66\2\0\3\20\1\67\10\0\2\20\1\27\1\70\2\0\1\71\1\26\1\72\3\26"+
    "\1\73\6\20\1\74\2\26\1\75\1\20\1\76\1\26\1\37\1\20\1\77\1\100\1\101\2\20\1"+
    "\102\1\103\1\104\1\52\1\105\1\106\1\107\1\76\1\26\1\23\1\0\1\110\1\111\1\101"+
    "\2\20\1\102\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\26\1\121\1\0\1\110"+
    "\1\34\1\33\2\20\1\102\1\122\1\104\1\42\1\123\1\124\1\0\1\76\1\26\1\0\1\40"+
    "\1\110\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\120\1\107\1\76\1\26"+
    "\1\40\1\0\1\125\1\126\1\127\1\130\1\131\1\126\1\20\1\132\1\133\1\134\1\135"+
    "\1\0\1\120\1\26\2\0\1\136\1\27\1\102\2\20\1\102\1\20\1\137\1\140\1\134\1\141"+
    "\1\44\1\76\1\26\2\0\1\77\1\27\1\102\2\20\1\102\1\142\1\104\1\140\1\134\1\141"+
    "\1\143\1\76\1\26\1\144\1\0\1\110\1\27\1\102\4\20\1\145\1\140\1\146\1\147\1"+
    "\150\1\76\1\26\1\0\1\36\1\151\1\20\1\21\1\36\2\20\1\33\1\152\1\21\1\153\1"+
    "\154\1\26\1\120\1\26\1\155\1\0\1\37\5\20\1\156\1\45\1\157\1\160\1\26\1\161"+
    "\4\0\1\162\1\163\1\164\1\37\1\165\1\166\1\156\1\167\1\170\1\171\1\26\1\172"+
    "\4\0\1\124\2\0\1\161\1\26\1\161\1\173\1\174\1\20\1\37\3\20\1\24\1\41\1\26"+
    "\1\140\1\175\1\26\1\41\3\26\1\176\1\177\7\0\5\20\1\46\1\26\1\200\1\26\1\161"+
    "\1\60\1\201\1\202\1\203\1\204\1\20\1\205\1\206\1\26\1\171\4\20\1\34\1\207"+
    "\5\20\1\210\51\20\1\127\1\21\1\127\5\20\1\127\4\20\1\127\1\21\1\127\1\20\1"+
    "\21\7\20\1\127\10\20\1\211\1\0\1\41\1\161\1\0\2\20\2\0\12\20\2\70\1\37\114"+
    "\20\1\100\2\20\1\37\2\20\1\44\11\20\1\126\1\20\1\124\1\20\1\27\1\212\1\0\2"+
    "\20\1\212\1\0\2\20\1\213\1\0\1\20\1\27\1\214\1\0\6\20\1\215\3\26\1\216\1\217"+
    "\1\26\1\161\3\0\1\220\1\26\1\161\13\20\1\0\5\20\1\221\10\20\1\70\1\0\3\20"+
    "\1\21\1\26\1\222\1\26\1\222\1\120\1\26\3\20\1\70\1\24\1\0\5\20\1\223\3\20"+
    "\1\23\1\26\1\45\4\0\2\20\1\157\1\222\6\20\1\175\1\160\3\26\1\52\1\26\1\161"+
    "\1\26\1\161\1\150\1\0\1\26\1\171\10\0\1\224\5\20\1\215\1\26\1\224\1\223\1"+
    "\26\1\161\1\0\1\225\1\222\1\0\1\226\3\20\1\75\1\203\1\26\1\62\4\20\1\60\1"+
    "\26\1\222\1\0\4\20\1\215\2\26\1\0\1\26\1\227\1\26\1\62\3\20\1\70\1\20\1\124"+
    "\10\0\1\230\2\26\1\231\1\232\1\161\30\20\6\26\1\171\1\225\42\20\2\70\4\20"+
    "\2\70\1\20\1\233\3\20\1\70\6\20\1\27\1\170\1\234\1\24\1\235\1\223\1\20\1\24"+
    "\1\234\1\24\7\0\1\106\1\236\1\0\1\237\3\0\1\40\1\150\2\0\1\20\1\24\6\0\1\26"+
    "\1\176\1\240\1\26\1\236\1\0\1\241\1\36\1\152\1\70\1\25\1\102\1\20\1\242\1"+
    "\243\1\244\2\0\5\20\1\124\116\0\5\20\1\21\5\20\1\21\20\20\1\24\1\245\1\246"+
    "\1\0\4\20\1\34\1\207\7\20\1\150\1\0\1\106\2\20\1\21\1\0\10\21\4\26\1\243\3"+
    "\0\1\37\1\205\1\247\1\24\1\37\11\20\1\21\1\250\1\37\12\20\1\210\1\243\4\20"+
    "\1\70\1\37\12\20\1\21\2\0\3\20\1\44\6\0\170\20\1\70\11\0\72\20\1\70\5\0\21"+
    "\20\1\24\10\0\5\20\1\70\41\20\1\24\2\20\1\26\1\246\2\0\5\20\1\157\1\71\1\251"+
    "\3\20\1\60\12\20\1\161\3\0\1\150\1\20\1\36\14\20\1\101\3\20\1\21\1\20\7\0"+
    "\1\150\1\20\1\252\1\253\2\20\1\46\3\0\6\20\1\223\1\0\1\62\5\20\1\215\1\26"+
    "\1\171\1\0\1\26\1\161\2\26\1\62\1\254\1\26\1\62\2\20\1\60\1\171\2\20\1\157"+
    "\1\26\1\222\1\0\3\20\1\24\1\73\5\20\1\46\1\26\1\236\1\150\1\26\1\161\1\255"+
    "\1\20\1\26\1\256\5\20\1\75\1\160\1\0\1\253\1\257\1\26\1\161\2\20\1\21\1\260"+
    "\6\20\1\202\1\261\1\221\2\0\1\262\1\20\1\46\1\263\1\0\3\264\1\0\2\21\5\20"+
    "\1\210\1\70\1\0\16\20\1\46\1\265\1\26\1\161\64\20\1\223\1\0\2\20\1\21\1\266"+
    "\5\20\1\223\40\0\55\20\1\70\15\20\1\23\4\0\1\21\1\0\1\266\1\267\1\20\1\102"+
    "\1\21\1\170\1\270\15\20\1\23\3\0\1\266\20\20\1\70\1\164\32\20\1\70\2\0\10"+
    "\20\1\36\6\20\5\0\1\20\1\23\2\26\2\0\2\26\1\271\2\0\1\272\4\0\1\273\1\233"+
    "\17\20\1\24\2\0\1\26\1\161\1\37\2\20\1\274\1\37\2\20\1\44\1\275\6\20\1\60"+
    "\3\20\1\21\3\36\1\276\4\0\1\20\1\142\2\20\1\21\2\20\1\277\1\20\1\70\1\20\1"+
    "\70\4\0\17\20\1\44\10\0\6\20\1\24\20\0\1\300\20\0\3\20\1\24\6\20\1\124\1\0"+
    "\1\236\3\0\4\20\2\0\3\20\1\44\4\20\1\60\1\45\3\20\1\70\4\20\1\223\1\20\1\247"+
    "\5\0\23\20\1\70\1\26\1\161\4\20\1\223\4\20\1\223\5\20\1\0\6\20\1\223\23\0"+
    "\46\20\1\21\1\0\2\20\1\70\1\0\1\20\23\0\1\70\1\102\4\20\1\34\1\301\2\20\1"+
    "\70\1\0\2\20\1\21\1\0\3\20\1\21\10\0\2\20\1\302\1\0\2\20\1\70\1\0\3\20\1\23"+
    "\10\0\7\20\1\275\10\0\1\303\1\71\1\142\1\37\2\20\1\223\1\114\4\0\3\20\1\24"+
    "\3\20\1\24\4\0\1\20\1\37\2\20\1\304\3\0\6\20\1\70\1\0\2\20\1\70\1\0\2\20\1"+
    "\44\1\0\2\20\1\23\15\0\11\20\1\124\6\0\6\20\1\44\1\0\6\20\1\44\41\0\1\226"+
    "\6\20\1\26\1\160\3\0\1\120\1\26\1\0\1\106\1\226\5\20\1\26\1\45\2\0\3\20\1"+
    "\124\1\26\1\161\1\226\3\20\1\157\1\26\1\140\1\26\2\0\4\20\1\305\1\0\1\226"+
    "\5\20\1\46\1\26\1\306\1\307\1\26\1\310\4\0\2\20\1\33\2\20\1\215\1\26\1\177"+
    "\10\0\1\21\1\311\1\20\1\34\1\20\1\124\5\20\1\157\1\26\1\45\1\26\1\161\1\136"+
    "\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\135\1\243\1\76\2\176\21\0"+
    "\6\20\1\175\1\26\1\200\1\44\1\26\1\161\4\0\6\20\2\26\1\312\1\0\1\26\1\161"+
    "\24\0\5\20\1\157\1\171\1\26\1\236\2\0\1\257\4\0\6\20\2\26\1\313\1\0\1\26\1"+
    "\161\4\0\5\20\1\46\1\26\1\0\1\26\1\161\6\0\3\20\1\314\1\26\1\222\1\26\1\161"+
    "\54\0\10\20\1\26\1\161\1\0\1\150\70\0\7\20\1\124\40\0\1\20\1\102\3\20\1\157"+
    "\1\160\1\26\1\124\1\0\1\26\1\161\2\0\1\36\3\20\1\315\2\26\1\41\1\160\51\0"+
    "\63\20\1\23\14\0\15\20\1\21\2\0\30\20\1\223\27\0\5\20\1\21\72\0\10\20\1\21"+
    "\67\0\7\20\1\124\3\20\1\21\1\26\1\161\14\0\3\20\1\70\1\176\1\0\6\20\1\160"+
    "\1\0\1\223\1\0\1\26\1\161\1\266\2\20\1\243\2\20\56\0\10\20\1\24\1\0\1\75\4"+
    "\26\1\160\1\0\1\106\1\226\1\20\10\0\1\124\3\0\75\20\1\24\2\0\36\20\1\44\41"+
    "\0\1\23\77\0\15\20\1\44\1\20\1\24\1\20\1\124\1\20\1\316\130\0\1\272\1\317"+
    "\1\45\1\225\1\320\1\222\3\0\1\321\22\0\1\307\67\0\12\20\1\27\10\20\1\27\1"+
    "\322\1\323\1\20\1\324\1\142\7\20\1\34\1\325\2\27\3\20\1\326\1\170\1\36\1\102"+
    "\51\20\1\70\3\20\1\102\2\20\1\210\3\20\1\210\2\20\1\27\3\20\1\27\2\20\1\21"+
    "\3\20\1\21\3\20\1\102\3\20\1\102\2\20\1\210\1\327\14\26\1\160\1\225\5\26\1"+
    "\176\1\300\1\0\1\237\2\0\1\225\1\41\1\26\52\0\1\160\2\26\1\330\1\331\1\45"+
    "\72\0\30\20\1\24\1\0\1\160\5\0\10\20\1\215\1\45\1\26\1\161\24\0\1\142\3\20"+
    "\1\162\1\37\1\210\1\332\1\241\1\333\1\162\1\233\1\162\2\210\1\117\1\20\1\33"+
    "\1\20\1\223\1\334\1\33\1\20\1\223\50\0\32\20\1\21\5\0\106\20\1\24\1\0\33\20"+
    "\1\70\120\20\1\23\53\0\3\20\1\70\134\0\36\26\2\0");

  /* The ZZ_CMAP_A table has 1768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\2\0\1\2\2\0\1\3\1\65\1\11\1\0\1\4\1\52\1\62\1\0\1\57\1\60\1"+
    "\17\1\61\1\105\1\14\1\15\1\16\1\13\11\12\1\66\1\67\1\51\1\50\1\64\2\0\1\76"+
    "\1\104\1\6\1\103\1\75\1\72\2\6\1\102\2\6\1\77\2\6\1\106\1\101\1\6\1\73\1\100"+
    "\1\71\1\74\5\6\1\55\1\5\1\56\1\0\1\107\1\10\1\26\1\36\1\30\1\33\1\41\1\44"+
    "\1\32\1\31\1\22\1\70\1\45\1\35\1\27\1\23\1\37\1\20\1\43\1\21\1\42\1\24\1\34"+
    "\1\46\1\25\1\47\1\40\1\6\1\53\1\63\1\54\4\0\1\6\12\0\1\6\1\0\1\7\17\6\1\0"+
    "\2\6\4\0\4\6\6\0\5\6\7\0\1\6\1\0\1\6\1\0\10\7\5\6\1\0\2\6\3\0\3\6\1\0\1\6"+
    "\6\0\1\6\1\7\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\7\6"+
    "\1\0\1\6\7\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\3\7\5\0\3\6\7\7"+
    "\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\0\6\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\2\6"+
    "\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7"+
    "\1\6\5\7\2\0\1\6\3\7\4\0\6\6\6\0\6\7\1\0\11\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6"+
    "\2\7\2\0\2\7\1\6\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\3\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\1\6\1\0\3\7\1\0\6\6\4\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1"+
    "\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0\1"+
    "\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0"+
    "\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\5\7\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\1"+
    "\0\4\6\1\0\3\6\6\0\1\6\2\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\5\0\3\6\1\7"+
    "\7\0\1\6\2\0\2\7\1\0\7\6\1\0\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1"+
    "\7\1\6\5\7\7\6\10\7\1\0\2\7\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4"+
    "\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6"+
    "\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\10\7\11\0\1\7"+
    "\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\5\0\1\6"+
    "\2\0\3\6\1\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7"+
    "\3\0\1\6\4\0\1\6\1\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0\4\7\4\0\4\6\4\0\5\7\3\6\3"+
    "\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0\1\6\1"+
    "\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\1\7\13\0\1\7\4\0\1\7\3\0\3\7\2\0\1"+
    "\6\4\0\3\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\5\6\3\0\2\7\2\0\3\6"+
    "\6\7\1\0\3\6\1\7\3\6\1\7\4\6\1\7\4\6\3\0\1\6\1\0\1\6\2\0\5\6\1\7\2\6\2\7\5"+
    "\6\1\0\4\6\2\7\4\0\1\6\3\7\2\6\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0"+
    "\3\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\2\6\3\0\2\7\10\0\3\7\1\0"+
    "\1\6\1\0\1\6\3\0\4\6\4\0\1\7\6\0\2\6\2\0\3\6\3\0\3\6\1\0\2\6\1\0\1\6\5\0\1"+
    "\7\2\0\1\6\3\0\1\6\2\0\4\6\1\0\2\6\2\0\1\6\3\7\1\0\2\7\1\0\5\6\2\7\1\0\3\6"+
    "\1\7\2\0\1\6\1\0\1\7\4\6\5\0\3\7\3\0\2\7\1\6\1\0\1\6\3\0\1\6\1\0\4\6\1\0\1"+
    "\6\4\7\2\6\1\0\1\6\1\7\3\0\1\6\3\0\2\6\3\0\3\7\2\0\6\7\2\6\3\0\2\7\1\0\2\7"+
    "\3\0\6\7\2\0\3\7\2\0\4\7\4\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2"+
    "\0\5\6\1\0\4\6\1\0\4\6\2\0\3\7\2\0\7\7\1\0\2\7\1\0\2\7\1\0\1\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\23\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\1\1\23"+
    "\1\24\1\25\1\26\7\3\1\27\1\30\2\1\1\31"+
    "\1\1\14\3\1\1\1\13\1\32\1\15\1\0\1\33"+
    "\2\4\2\34\1\35\1\34\1\0\1\36\1\37\1\0"+
    "\12\3\1\40\5\3\1\41\36\3\1\42\13\3\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\10\3"+
    "\1\0\1\53\1\54\5\3\1\55\1\56\1\0\2\57"+
    "\2\37\2\0\2\3\1\60\24\3\1\61\14\3\1\62"+
    "\2\3\1\63\7\3\1\64\17\3\1\65\11\3\1\65"+
    "\1\0\1\66\2\3\1\67\1\70\11\3\1\71\1\72"+
    "\1\73\1\3\1\74\1\75\1\76\2\3\1\77\1\3"+
    "\1\100\1\3\1\101\1\102\1\3\1\103\6\3\1\104"+
    "\6\3\1\105\1\106\2\3\1\107\2\3\1\110\2\3"+
    "\1\111\1\112\1\3\1\113\1\114\1\3\1\115\6\3"+
    "\1\116\1\117\1\120\7\3\1\121\3\3\1\122\12\3"+
    "\1\123\1\124\1\125\1\3\1\126\7\3\1\127\5\3"+
    "\1\130\1\3\1\131\6\3\1\132\3\3\1\133\4\3"+
    "\1\134\1\3\1\135\1\136\1\137\1\3\1\140\1\3"+
    "\1\141\1\3\1\142\2\3\1\143\1\3\1\144\2\3"+
    "\1\145\1\146\4\3\1\147\1\3\1\150\1\3\1\151"+
    "\1\152\2\3\1\153\1\154\2\3\1\155\1\156\2\3"+
    "\1\157\2\3\1\160\1\161\2\3\1\162\3\3\1\163"+
    "\1\3\1\164\1\165\4\3\1\166\1\3\1\167\15\3"+
    "\1\170\1\3\1\171\7\3\1\172";

  private static int [] zzUnpackAction() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u01b0\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870"+
    "\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u0a68\0\u0ab0\0\u0af8"+
    "\0\u0b40\0\u0b88\0\u01b0\0\u01b0\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8"+
    "\0\u0cf0\0\u0d38\0\u0d80\0\u01b0\0\u0dc8\0\u0e10\0\u0e58\0\u01b0"+
    "\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098"+
    "\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u09d8\0\u1248\0\u01b0"+
    "\0\u1290\0\u0288\0\u01b0\0\u12d8\0\u01b0\0\u01b0\0\u0318\0\u03f0"+
    "\0\u1320\0\u1368\0\u01b0\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0"+
    "\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u0240"+
    "\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u0240\0\u1878\0\u18c0"+
    "\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00"+
    "\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40"+
    "\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80"+
    "\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u0240\0\u20e8\0\u2130\0\u2178"+
    "\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8"+
    "\0\u0e58\0\u01b0\0\u01b0\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760"+
    "\0\u01b0\0\u01b0\0\u1320\0\u01b0\0\u1368\0\u01b0\0\u27a8\0\u27f0"+
    "\0\u2838\0\u2880\0\u28c8\0\u0240\0\u2910\0\u2958\0\u29a0\0\u29e8"+
    "\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28"+
    "\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68"+
    "\0\u0240\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060"+
    "\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u0240\0\u3210\0\u3258"+
    "\0\u0240\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450"+
    "\0\u0240\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648"+
    "\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888"+
    "\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8"+
    "\0\u3b10\0\u3b58\0\u0240\0\u3ba0\0\u01b0\0\u3be8\0\u3c30\0\u0240"+
    "\0\u0240\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28"+
    "\0\u3e70\0\u3eb8\0\u0240\0\u01b0\0\u0240\0\u3f00\0\u0240\0\u0240"+
    "\0\u0240\0\u3f48\0\u3f90\0\u01b0\0\u3fd8\0\u01b0\0\u4020\0\u01b0"+
    "\0\u01b0\0\u4068\0\u0240\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0"+
    "\0\u4218\0\u01b0\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380\0\u43c8"+
    "\0\u0240\0\u01b0\0\u4410\0\u4458\0\u0240\0\u44a0\0\u44e8\0\u0240"+
    "\0\u4530\0\u4578\0\u01b0\0\u0240\0\u45c0\0\u0240\0\u4608\0\u4650"+
    "\0\u0240\0\u4698\0\u46e0\0\u4728\0\u4770\0\u47b8\0\u4608\0\u0240"+
    "\0\u0240\0\u01b0\0\u4800\0\u4848\0\u4890\0\u48d8\0\u4920\0\u4968"+
    "\0\u49b0\0\u0240\0\u49f8\0\u4a40\0\u4a88\0\u0240\0\u4ad0\0\u4b18"+
    "\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58"+
    "\0\u0240\0\u01b0\0\u01b0\0\u4da0\0\u01b0\0\u4de8\0\u4e30\0\u4e78"+
    "\0\u4ec0\0\u4f08\0\u4f50\0\u4f98\0\u01b0\0\u4fe0\0\u5028\0\u5070"+
    "\0\u50b8\0\u5100\0\u01b0\0\u5148\0\u01b0\0\u5190\0\u51d8\0\u5220"+
    "\0\u5268\0\u52b0\0\u52f8\0\u01b0\0\u5340\0\u5388\0\u53d0\0\u0240"+
    "\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u0240\0\u5538\0\u5580\0\u0240"+
    "\0\u0240\0\u55c8\0\u0240\0\u5610\0\u0240\0\u5658\0\u0240\0\u56a0"+
    "\0\u56e8\0\u0240\0\u5730\0\u01b0\0\u5778\0\u57c0\0\u0240\0\u0240"+
    "\0\u5808\0\u5850\0\u5898\0\u58e0\0\u0240\0\u5928\0\u0240\0\u5970"+
    "\0\u01b0\0\u0240\0\u59b8\0\u5a00\0\u01b0\0\u0240\0\u5a48\0\u5a90"+
    "\0\u0240\0\u0240\0\u5ad8\0\u5b20\0\u01b0\0\u5b68\0\u5bb0\0\u0240"+
    "\0\u01b0\0\u5bf8\0\u5c40\0\u0240\0\u5c88\0\u5cd0\0\u5d18\0\u01b0"+
    "\0\u5d60\0\u0240\0\u01b0\0\u5da8\0\u5df0\0\u5e38\0\u5e80\0\u01b0"+
    "\0\u5ec8\0\u01b0\0\u5f10\0\u5f58\0\u5fa0\0\u5fe8\0\u6030\0\u6078"+
    "\0\u60c0\0\u6108\0\u6150\0\u6198\0\u61e0\0\u6228\0\u6270\0\u01b0"+
    "\0\u62b8\0\u0240\0\u6300\0\u6348\0\u6390\0\u63d8\0\u6420\0\u6468"+
    "\0\u64b0\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\3\10\2\7\1\11\1\7\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\11\1\42\1\43"+
    "\1\11\1\44\3\11\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\11\1\65\1\66\5\11\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\2\11\4\75\1\76"+
    "\1\77\2\75\1\100\40\75\1\101\36\75\1\7\3\10"+
    "\2\7\1\11\2\7\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\11\1\102\1\24\1\103\1\104\1\11"+
    "\1\105\1\106\1\107\2\11\1\110\1\111\1\112\1\11"+
    "\1\113\1\11\1\42\1\114\1\11\1\115\3\11\1\116"+
    "\1\46\1\117\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\11"+
    "\1\65\1\66\5\11\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\2\11\111\7\3\10\4\7\1\120\100\7\3\10"+
    "\2\7\1\11\2\7\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\11\1\102\1\24\1\103\1\104\1\11"+
    "\1\105\1\106\1\107\2\11\1\110\1\111\1\112\1\11"+
    "\1\113\1\11\1\42\1\114\1\11\1\115\3\11\1\116"+
    "\1\46\1\47\1\50\1\121\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\11"+
    "\1\65\1\66\5\11\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\2\11\111\0\3\10\112\0\2\11\2\0\2\11"+
    "\4\0\30\11\20\0\15\11\1\0\2\11\10\122\1\123"+
    "\77\122\5\13\1\124\3\13\1\125\76\13\12\126\2\127"+
    "\1\126\1\130\104\126\2\131\1\126\1\130\72\126\12\0"+
    "\1\132\1\0\1\133\105\0\2\130\112\0\1\134\1\135"+
    "\76\0\2\11\2\0\2\11\4\0\1\11\1\136\4\11"+
    "\1\137\5\11\1\140\2\11\1\141\10\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\1\142"+
    "\1\11\1\143\3\11\1\144\10\11\1\145\1\11\1\146"+
    "\6\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\3\11\1\147\20\11\1\150\3\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\6\11\1\151\5\11\1\152\2\11\1\153\10\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\1\11\1\154\1\155\14\11\1\156\1\11\1\157\6\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\2\11\1\160\3\11\1\161\12\11\1\162\6\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\11\1\163\1\11\1\164\7\11\1\165\6\11"+
    "\1\166\5\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\2\11\1\167\3\11\1\170\5\11"+
    "\1\171\2\11\1\172\1\11\1\173\6\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\6\11"+
    "\1\174\2\11\1\175\3\11\1\176\1\11\1\177\10\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\21\11\1\200\6\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\21\11\1\201\6\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\2\11\1\202\16\11\1\203\6\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\1\11"+
    "\1\204\1\11\1\205\10\11\1\206\13\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\1\207"+
    "\1\11\1\210\14\11\1\211\1\11\1\212\6\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\2\11\1\213\14\11\1\214\10\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\3\11\1\215"+
    "\12\11\1\216\11\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\217\11\11\1\220"+
    "\12\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\4\11\1\221\1\11\1\222\5\11\1\223"+
    "\3\11\1\224\1\225\6\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\1\11\1\226\4\11"+
    "\1\227\10\11\1\230\10\11\20\0\15\11\1\0\2\11"+
    "\50\0\1\231\13\0\1\232\73\0\1\233\120\0\1\234"+
    "\110\0\1\235\110\0\1\236\74\0\1\237\107\0\1\240"+
    "\45\0\2\11\2\0\2\11\4\0\1\11\1\154\26\11"+
    "\20\0\3\11\1\241\11\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\6\11\1\242\21\11\20\0\6\11"+
    "\1\243\6\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\4\11\1\244\23\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\17\11\1\245\10\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\3\11\1\246\24\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\17\11\1\247\10\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\17\11\1\250\10\11\20\0\15\11\1\0\2\11"+
    "\4\75\1\0\1\251\2\75\1\0\40\75\1\0\36\75"+
    "\53\0\1\252\40\0\2\75\2\0\1\75\40\0\1\75"+
    "\110\0\1\253\43\0\2\11\2\0\2\11\4\0\1\142"+
    "\1\11\1\143\3\11\1\144\10\11\1\145\1\11\1\254"+
    "\6\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\14\11\1\152\2\11\1\153\10\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\1\11\1\154\1\155\25\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\1\11\1\163\11\11"+
    "\1\165\14\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\2\11\1\167\11\11\1\171\2\11"+
    "\1\172\10\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\11\11\1\175\5\11\1\255\10\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\2\11\1\202\25\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\3\11\1\205\10\11"+
    "\1\206\13\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\1\207\20\11\1\256\6\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\16\11\1\216\11\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\14\11\1\223\13\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\1\11\1\257\4\11\1\227\10\11\1\260\10\11\20\0"+
    "\15\11\1\0\2\11\64\0\1\261\27\0\1\262\103\0"+
    "\1\13\2\0\105\13\12\0\2\263\1\0\1\130\72\0"+
    "\12\264\2\265\1\264\1\0\72\264\1\134\1\266\1\267"+
    "\105\134\17\270\1\271\70\270\6\0\2\11\2\0\2\11"+
    "\4\0\2\11\1\272\25\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\4\11\1\273\23\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\4\11\1\274\15\11\1\275\5\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\22\11"+
    "\1\276\5\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\6\11\1\277\21\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\12\11"+
    "\1\300\15\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\3\11\1\301\24\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\14\11"+
    "\1\302\13\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\6\11\1\303\13\11\1\304\1\305"+
    "\4\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\13\11\1\306\14\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\7\11\1\307"+
    "\20\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\15\11\1\310\12\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\5\11\1\311"+
    "\22\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\14\11\1\312\13\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\7\11\1\313"+
    "\20\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\27\11\1\314\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\4\11\1\315\23\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\2\11\1\316\25\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\16\11\1\317\11\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\11\1\320\26\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\13\11\1\321\14\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\13\11\1\322\14\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\20\11\1\323\7\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\13\11\1\324\14\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\4\11\1\325\23\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\15\11\1\326\12\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\13\11\1\327\14\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\6\11\1\330\21\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\15\11\1\331\12\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\14\11\1\332\13\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\2\11\1\333\25\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\3\11\1\334\24\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\6\11\1\335\21\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\4\11\1\336\23\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\26\11\1\337\1\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\15\11\1\340\12\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\15\11\1\341\12\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\2\11\1\342\10\11\1\343\14\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\2\11"+
    "\1\344\25\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\6\11\1\345\21\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\22\11"+
    "\1\346\5\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\6\11\1\347\21\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\3\11"+
    "\1\350\1\351\17\11\1\352\3\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\3\11\1\353"+
    "\24\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\13\11\1\354\14\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\30\11\20\0"+
    "\1\355\14\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\10\11\1\356\17\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\22\11\1\357\5\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\6\11\1\360\21\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\3\11\1\361\24\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\16\11\1\362\11\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\3\11\1\363\24\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\11\1\364\1\11\1\365\24\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\17\11"+
    "\1\366\10\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\15\11\1\367\7\11\1\370\2\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\11\1\371\26\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\30\11\20\0\4\11"+
    "\1\372\10\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\15\11\1\367\12\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\30\11\20\0\7\11"+
    "\1\373\5\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\1\11\1\374\26\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\22\11\1\375\5\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\4\11\1\376\23\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\14\11\1\377\13\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\17\11\1\u0100\10\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\6\11\1\303\21\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\3\11\1\u0101\24\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\3\11\1\350\20\11"+
    "\1\352\3\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\17\11\1\u0102\10\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\1\11"+
    "\1\u0103\26\11\20\0\15\11\1\0\2\11\1\0\1\266"+
    "\106\0\17\270\1\u0104\70\270\16\0\1\u0105\1\271\76\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\u0106\24\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\10\11\1\u0107\17\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\11\11\1\u0108\16\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\4\11\1\u0109\23\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\13\11\1\u010a\14\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\11\11\1\u010b\16\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\13\11\1\u010c\14\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\3\11\1\u010d\24\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\13\11\1\u010e\14\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\1\u010f\27\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\14\11\1\u0110\13\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\21\11"+
    "\1\u0111\6\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\21\11\1\u0112\6\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\15\11"+
    "\1\u0113\12\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\30\11\7\0\1\u0114\10\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\21\11"+
    "\1\u0115\6\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\21\11\1\u0116\6\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\4\11"+
    "\1\u0117\23\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\11\11\1\u0118\16\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\4\11"+
    "\1\u0119\23\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\22\11\1\u011a\5\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\6\11"+
    "\1\u011b\21\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\30\11\7\0\1\u011c\10\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\3\11"+
    "\1\u011d\24\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\30\11\7\0\1\u011e\10\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\10\11"+
    "\1\u011f\17\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\30\11\7\0\1\u0120\10\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\30\11"+
    "\7\0\1\u0121\10\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\22\11\1\u0122\5\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\15\11"+
    "\1\u0123\12\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\3\11\1\u0124\24\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\21\11"+
    "\1\u0125\6\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\3\11\1\u0126\1\u0127\3\11\1\u0128"+
    "\17\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\13\11\1\u0129\14\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\30\11\7\0"+
    "\1\u012a\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\21\11\1\u012b\6\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\23\11\1\u012c"+
    "\4\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\21\11\1\u012d\6\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\13\11\1\u012e"+
    "\14\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\13\11\1\u012f\14\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\4\11\1\u0130"+
    "\23\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\13\11\1\u0131\14\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\30\11\7\0"+
    "\1\u0132\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\4\11\1\u0133\23\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\6\11\1\u0134"+
    "\21\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\20\11\1\u0135\7\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\21\11\1\u0136"+
    "\6\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\17\11\1\u0137\10\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\21\11\1\u0138"+
    "\6\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\4\11\1\u0139\23\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\13\11\1\u013a"+
    "\14\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\30\11\7\0\1\u013b\10\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\10\11\1\u013c"+
    "\17\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\26\11\1\u013d\1\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\13\11\1\u013e"+
    "\14\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\7\11\1\u013f\20\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\22\11\1\312"+
    "\5\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\21\11\1\u0140\6\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\7\11\1\u0141"+
    "\20\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\30\11\20\0\5\11\1\u0115\7\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\30\11\20\0"+
    "\10\11\1\372\4\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\2\11\1\u0142\25\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\2\11\1\u0143"+
    "\25\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\21\11\1\u0144\6\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\16\11\1\u0145"+
    "\11\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\15\11\1\u0146\12\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\4\11\1\u0127"+
    "\3\11\1\u0128\17\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\7\11\1\u0147\20\11\20\0"+
    "\15\11\1\0\2\11\16\270\1\u0105\1\u0104\70\270\6\0"+
    "\2\11\2\0\2\11\4\0\4\11\1\u0148\23\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\11\11\1\u0149\16\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\30\11\7\0\1\u014a\10\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\4\11\1\u014b\23\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\17\11\1\u014c\10\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\13\11\1\u014d\14\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\30\11\20\0\15\11\1\0"+
    "\1\11\1\u014e\6\0\2\11\2\0\2\11\4\0\17\11"+
    "\1\u014f\10\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\21\11\1\u0150\6\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\27\11"+
    "\1\u0151\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\13\11\1\u0152\14\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\22\11\1\u0153"+
    "\5\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\17\11\1\u0154\10\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\20\11\1\u0155"+
    "\7\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\10\11\1\u0156\17\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\11\11\1\u0157"+
    "\16\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\14\11\1\u0158\13\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\25\11\1\u0159"+
    "\2\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\3\11\1\u015a\24\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\21\11\1\u015b"+
    "\6\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\6\11\1\u015c\21\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\6\11\1\u015d"+
    "\21\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\21\11\1\u015e\6\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\4\11\1\u015f"+
    "\23\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\14\11\1\u0160\13\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\24\11\1\u0161"+
    "\3\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\30\11\7\0\1\u0162\10\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\30\11\7\0"+
    "\1\u0163\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\21\11\1\u0164\6\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\30\11\7\0"+
    "\1\u0165\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\1\11\1\u0166\26\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\10\11\1\u0167"+
    "\17\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\13\11\1\u0168\14\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\14\11\1\u0169"+
    "\13\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\16\11\1\u016a\11\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\21\11\1\u016b"+
    "\6\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\30\11\20\0\15\11\1\0\1\11\1\u016c"+
    "\6\0\2\11\2\0\2\11\4\0\30\11\7\0\1\u016d"+
    "\10\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\3\11\1\u016e\24\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\4\11\1\u016f\23\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\12\11\1\u0170\15\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\15\11\1\u0171\12\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\21\11\1\u0172\6\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\30\11\7\0\1\u0173"+
    "\10\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\7\11\1\u0174\20\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\30\11\7\0\1\u0175"+
    "\10\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\5\11\1\u0176\22\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\3\11\1\u0177\24\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\22\11\1\u0178\5\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\30\11\20\0\15\11"+
    "\1\0\1\u0179\1\11\6\0\2\11\2\0\2\11\4\0"+
    "\4\11\1\u017a\23\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\10\11\1\u017b\17\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\30\11\7\0\1\u017c\10\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\2\11\1\u017d\25\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\1\11\1\u017e\26\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\21\11\1\u017f\6\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\4\11\1\u0180\23\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\10\11\1\u0181\17\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\2\11\1\u0182\25\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\4\11\1\u0183\23\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\1\11\1\u0184\26\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\21\11\1\u0185\6\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\21\11\1\u0186\6\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\u0187\24\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\20\11\1\u0188\7\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\4\11\1\u0189\23\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\21\11\1\u018a\6\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\22\11\1\u018b\5\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\17\11\1\u018c\10\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\1\11\1\u018d\26\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\30\11\20\0\1\u018e\14\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\12\11\1\u018f\15\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\2\11"+
    "\1\u0190\25\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\21\11\1\u0191\6\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\21\11"+
    "\1\u0192\6\11\20\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\6\11\1\u0193\21\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\30\11"+
    "\7\0\1\u0194\10\0\15\11\1\0\1\11\1\u0195\6\0"+
    "\2\11\2\0\2\11\4\0\6\11\1\u0196\21\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\13\11\1\u0197\14\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\4\11\1\u0198\23\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\24\11\1\u0199\3\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\6\11\1\u019a\21\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\25\11\1\u019b\2\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\u019c\24\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\21\11\1\u019d\6\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\13\11\1\u019e\14\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\4\11\1\u019f\23\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\u01a0\24\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\30\11\7\0\1\u01a1\10\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\22\11\1\u01a2\5\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\30\11\20\0\15\11\1\0\1\11\1\u01a3\6\0\2\11"+
    "\2\0\2\11\4\0\21\11\1\u01a4\6\11\20\0\15\11"+
    "\1\0\2\11\6\0\2\11\2\0\2\11\4\0\30\11"+
    "\7\0\1\u01a5\10\0\15\11\1\0\2\11\6\0\2\11"+
    "\2\0\2\11\4\0\27\11\1\u01a6\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\22\11\1\u01a7"+
    "\5\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\26\11\1\u01a8\1\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\1\11\1\u01a9"+
    "\26\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\3\11\1\u01aa\24\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\21\11\1\u01ab"+
    "\6\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\26\11\1\u01ac\1\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\30\11\7\0"+
    "\1\u01ad\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\7\11\1\u01ae\20\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\21\11\1\u01af"+
    "\6\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\12\11\1\u01b0\15\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\30\11\7\0"+
    "\1\u01b1\10\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\22\11\1\u01b2\5\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\1\11\1\u01b3"+
    "\26\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\1\11\1\u01b4\26\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\17\11\1\u01b5"+
    "\10\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\21\11\1\u01b6\6\11\20\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\15\11\1\u01b7"+
    "\12\11\20\0\15\11\1\0\2\11\6\0\2\11\2\0"+
    "\2\11\4\0\30\11\7\0\1\u01b8\10\0\15\11\1\0"+
    "\2\11\6\0\2\11\2\0\2\11\4\0\1\u01b9\27\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\4\11\1\u01ba\23\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\30\11\7\0\1\u01bb"+
    "\10\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\6\11\1\u01bc\21\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\3\11\1\u01bd\24\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\30\11\20\0\12\11\1\u01be\2\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\21\11\1\u01bf\6\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\30\11\7\0\1\u01c0\10\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\3\11\1\u01c1\24\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\30\11\7\0\1\u01c2\10\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\3\11\1\u01c3\24\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\7\11\1\u01c4\20\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\13\11\1\u01c5\14\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\4\11\1\u01c6\23\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\21\11\1\u01c7\6\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\17\11\1\u01c8\10\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\21\11\1\u01c9\6\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\3\11\1\u01ca\24\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\7\11\1\u01cb\20\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\12\11\1\u01cc\15\11\20\0\15\11\1\0\2\11"+
    "\6\0\2\11\2\0\2\11\4\0\4\11\1\u01cd\23\11"+
    "\20\0\15\11\1\0\2\11\6\0\2\11\2\0\2\11"+
    "\4\0\30\11\20\0\15\11\1\0\1\11\1\u01ce\6\0"+
    "\2\11\2\0\2\11\4\0\21\11\1\u01cf\6\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\30\11\7\0\1\u01d0\10\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\21\11\1\u01d1\6\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\1\11\1\u01d2\26\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\15\11\1\u01d3\12\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\21\11\1\u01d4\6\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\7\11\1\u01d5\20\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\21\11\1\u01d6\6\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\3\11\1\u01d7\24\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\4\11\1\u01d8\23\11\20\0\15\11\1\0\2\11\6\0"+
    "\2\11\2\0\2\11\4\0\22\11\1\u01d9\5\11\20\0"+
    "\15\11\1\0\2\11\6\0\2\11\2\0\2\11\4\0"+
    "\30\11\7\0\1\u01da\10\0\15\11\1\0\2\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25848];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\11\1\1\11\25\1\7\11\5\1\2\11"+
    "\7\1\1\11\3\1\1\11\17\1\1\11\1\1\1\0"+
    "\1\11\1\1\2\11\3\1\1\0\1\11\1\1\1\0"+
    "\73\1\10\11\10\1\1\0\2\11\5\1\2\11\1\0"+
    "\1\11\1\1\1\11\1\1\2\0\112\1\1\0\1\11"+
    "\16\1\1\11\7\1\1\11\1\1\1\11\1\1\2\11"+
    "\10\1\1\11\7\1\1\11\10\1\1\11\16\1\1\11"+
    "\27\1\2\11\1\1\1\11\7\1\1\11\5\1\1\11"+
    "\1\1\1\11\6\1\1\11\27\1\1\11\14\1\1\11"+
    "\3\1\1\11\7\1\1\11\3\1\1\11\6\1\1\11"+
    "\2\1\1\11\4\1\1\11\1\1\1\11\15\1\1\11"+
    "\11\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  Stack<String> jsonStack = new Stack<String>();
  Stack<Integer> state = new Stack<Integer>();
  public boolean textStarted = false;

  public JourneyLexer() {
    this((java.io.Reader)null);
  }


  public void pushState(Integer newState){
      state.push(yystate());
      yybegin(newState);
  }
  public void popState(){
        yybegin(state.pop());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JourneyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 123: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 124: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 125: break;
          case 4: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 126: break;
          case 5: 
            { return OP_MINUS;
            } 
            // fall through
          case 127: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 128: break;
          case 7: 
            { return OP_DIVIDE;
            } 
            // fall through
          case 129: break;
          case 8: 
            { return OP_MULTIPLY;
            } 
            // fall through
          case 130: break;
          case 9: 
            { return ASSIGN;
            } 
            // fall through
          case 131: break;
          case 10: 
            { return OP_LT;
            } 
            // fall through
          case 132: break;
          case 11: 
            { return OP_MOD;
            } 
            // fall through
          case 133: break;
          case 12: 
            { return LBRACE;
            } 
            // fall through
          case 134: break;
          case 13: 
            { return RBRACE;
            } 
            // fall through
          case 135: break;
          case 14: 
            { return LBRACK;
            } 
            // fall through
          case 136: break;
          case 15: 
            { return RBRACK;
            } 
            // fall through
          case 137: break;
          case 16: 
            { return LPAREN;
            } 
            // fall through
          case 138: break;
          case 17: 
            { return RPAREN;
            } 
            // fall through
          case 139: break;
          case 18: 
            { return OP_PLUS;
            } 
            // fall through
          case 140: break;
          case 19: 
            { return OP_GT;
            } 
            // fall through
          case 141: break;
          case 20: 
            { return OP_NOT;
            } 
            // fall through
          case 142: break;
          case 21: 
            { return COLON;
            } 
            // fall through
          case 143: break;
          case 22: 
            { return SEMICOLON;
            } 
            // fall through
          case 144: break;
          case 23: 
            { return COMMA;
            } 
            // fall through
          case 145: break;
          case 24: 
            { return TEXT_LITERAL;
            } 
            // fall through
          case 146: break;
          case 25: 
            { popState(); popState(); return BACKTICK;
            } 
            // fall through
          case 147: break;
          case 26: 
            { pushState(IN_TEXT_TEMPLATE); return BACKTICK;
            } 
            // fall through
          case 148: break;
          case 27: 
            { return NAME;
            } 
            // fall through
          case 149: break;
          case 28: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return POSITIVEINTEGERVALUE;
            } 
            // fall through
          case 150: break;
          case 29: 
            { return DOUBLEVALUE ;
            } 
            // fall through
          case 151: break;
          case 30: 
            { return OP_DECREMENT;
            } 
            // fall through
          case 152: break;
          case 31: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 153: break;
          case 32: 
            { return IF;
            } 
            // fall through
          case 154: break;
          case 33: 
            { return TO;
            } 
            // fall through
          case 155: break;
          case 34: 
            { return ON;
            } 
            // fall through
          case 156: break;
          case 35: 
            { return OP_EQUAL;
            } 
            // fall through
          case 157: break;
          case 36: 
            { return FATARROW;
            } 
            // fall through
          case 158: break;
          case 37: 
            { return OP_LE;
            } 
            // fall through
          case 159: break;
          case 38: 
            { return OP_INCREMENT;
            } 
            // fall through
          case 160: break;
          case 39: 
            { return OP_AND;
            } 
            // fall through
          case 161: break;
          case 40: 
            { return OP_OR;
            } 
            // fall through
          case 162: break;
          case 41: 
            { return OP_GE;
            } 
            // fall through
          case 163: break;
          case 42: 
            { return OP_NOTEQUAL;
            } 
            // fall through
          case 164: break;
          case 43: 
            { pushState(IN_ALT_SCRIPLET);return SCRIPLET_ALT_START;
            } 
            // fall through
          case 165: break;
          case 44: 
            { pushState(IN_SCRIPLET);return SCRIPLET_START;
            } 
            // fall through
          case 166: break;
          case 45: 
            { popState(); return SCRIPLET_END;
            } 
            // fall through
          case 167: break;
          case 46: 
            { popState(); return SCRIPLET_ALT_END;
            } 
            // fall through
          case 168: break;
          case 47: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return INETEGERVALUE;
            } 
            // fall through
          case 169: break;
          case 48: 
            { return PUT;
            } 
            // fall through
          case 170: break;
          case 49: 
            { return AND;
            } 
            // fall through
          case 171: break;
          case 50: 
            { return GET;
            } 
            // fall through
          case 172: break;
          case 51: 
            { return URL;
            } 
            // fall through
          case 173: break;
          case 52: 
            { return LET;
            } 
            // fall through
          case 174: break;
          case 53: 
            { return FOR;
            } 
            // fall through
          case 175: break;
          case 54: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 176: break;
          case 55: 
            { return PUSH;
            } 
            // fall through
          case 177: break;
          case 56: 
            { return POST;
            } 
            // fall through
          case 178: break;
          case 57: 
            { return NULLVALUE;
            } 
            // fall through
          case 179: break;
          case 58: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return NOW;
            } 
            // fall through
          case 180: break;
          case 59: 
            { return BOOLEANVALUE;
            } 
            // fall through
          case 181: break;
          case 60: 
            { pushState(IN_TEXT);return TEXT;
            } 
            // fall through
          case 182: break;
          case 61: 
            { return WITH;
            } 
            // fall through
          case 183: break;
          case 62: 
            { return WAIT;
            } 
            // fall through
          case 184: break;
          case 63: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return ADD;
            } 
            // fall through
          case 185: break;
          case 64: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return MID;
            } 
            // fall through
          case 186: break;
          case 65: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return MUL;
            } 
            // fall through
          case 187: break;
          case 66: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return MOD;
            } 
            // fall through
          case 188: break;
          case 67: 
            { return CALL;
            } 
            // fall through
          case 189: break;
          case 68: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return DIV;
            } 
            // fall through
          case 190: break;
          case 69: 
            { return LOAD;
            } 
            // fall through
          case 191: break;
          case 70: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return LEN;
            } 
            // fall through
          case 192: break;
          case 71: 
            { return BODY;
            } 
            // fall through
          case 193: break;
          case 72: 
            { return ELSE;
            } 
            // fall through
          case 194: break;
          case 73: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return SUB;
            } 
            // fall through
          case 195: break;
          case 74: 
            { return SYNC;
            } 
            // fall through
          case 196: break;
          case 75: 
            { return SEND;
            } 
            // fall through
          case 197: break;
          case 76: 
            { return FROM;
            } 
            // fall through
          case 198: break;
          case 77: 
            { return FORM;
            } 
            // fall through
          case 199: break;
          case 78: 
            { return PRINT;
            } 
            // fall through
          case 200: break;
          case 79: 
            { return PATCH;
            } 
            // fall through
          case 201: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return RPAD;
            } 
            // fall through
          case 202: break;
          case 81: 
            { return NAMED;
            } 
            // fall through
          case 203: break;
          case 82: 
            { return ASYNC;
            } 
            // fall through
          case 204: break;
          case 83: 
            { return UNDEF;
            } 
            // fall through
          case 205: break;
          case 84: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return UUID;
            } 
            // fall through
          case 206: break;
          case 85: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return LPAD;
            } 
            // fall through
          case 207: break;
          case 86: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return LEFT;
            } 
            // fall through
          case 208: break;
          case 87: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return FAKE;
            } 
            // fall through
          case 209: break;
          case 88: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return RIGHT;
            } 
            // fall through
          case 210: break;
          case 89: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return ROUND;
            } 
            // fall through
          case 211: break;
          case 90: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return ARRAY;
            } 
            // fall through
          case 212: break;
          case 91: 
            { return CLIENT;
            } 
            // fall through
          case 213: break;
          case 92: 
            { return DELETE;
            } 
            // fall through
          case 214: break;
          case 93: 
            { return LISTEN;
            } 
            // fall through
          case 215: break;
          case 94: 
            { return BINARY;
            } 
            // fall through
          case 216: break;
          case 95: 
            { return OBJECT_TEMPLATE;
            } 
            // fall through
          case 217: break;
          case 96: 
            { return STATUS;
            } 
            // fall through
          case 218: break;
          case 97: 
            { return SERVER;
            } 
            // fall through
          case 219: break;
          case 98: 
            { return STRING;
            } 
            // fall through
          case 220: break;
          case 99: 
            { return DOUBLE;
            } 
            // fall through
          case 221: break;
          case 100: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return RANDOM;
            } 
            // fall through
          case 222: break;
          case 101: 
            { return RESPOND;
            } 
            // fall through
          case 223: break;
          case 102: 
            { return REQUEST;
            } 
            // fall through
          case 224: break;
          case 103: 
            { return MEASURE;
            } 
            // fall through
          case 225: break;
          case 104: 
            { return CONNECT;
            } 
            // fall through
          case 226: break;
          case 105: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return CONCAT;
            } 
            // fall through
          case 227: break;
          case 106: 
            { return HEADERS;
            } 
            // fall through
          case 228: break;
          case 107: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return ENCODE;
            } 
            // fall through
          case 229: break;
          case 108: 
            { return SANDBOX;
            } 
            // fall through
          case 230: break;
          case 109: 
            { return INTEGER;
            } 
            // fall through
          case 231: break;
          case 110: 
            { return BOOL;
            } 
            // fall through
          case 232: break;
          case 111: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { return INDEXOF;
            } 
            // fall through
          case 233: break;
          case 112: 
            { return MATCHING;
            } 
            // fall through
          case 234: break;
          case 113: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { return CHUNKED;
            } 
            // fall through
          case 235: break;
          case 114: 
            { return LISTENER;
            } 
            // fall through
          case 236: break;
          case 115: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 8);
            { return READWAV;
            } 
            // fall through
          case 237: break;
          case 116: 
            { return WEBSOCKET;
            } 
            // fall through
          case 238: break;
          case 117: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 8);
            { return CONTAINS;
            } 
            // fall through
          case 239: break;
          case 118: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 9);
            { return TIMESTAMP;
            } 
            // fall through
          case 240: break;
          case 119: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 9);
            { return FROMJSON;
            } 
            // fall through
          case 241: break;
          case 120: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 14);
            { return RANDOMELEMENT;
            } 
            // fall through
          case 242: break;
          case 121: 
            { return POSITIVE_INTEGER;
            } 
            // fall through
          case 243: break;
          case 122: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 22);
            { return UNIQUERANDOMELEMENTS;
            } 
            // fall through
          case 244: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
