{
  parserClass="com.qalens.corr.lang.core.parser.JourneyParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Jrn"
  psiImplClassSuffix="Impl"
  psiPackage="com.qalens.corr.lang.core.psi"
  psiImplPackage="com.qalens.corr.lang.core.psi.impl"

  elementTypeHolderClass="com.qalens.corr.lang.core.psi.JrnElementTypes"
  elementTypeClass="com.qalens.corr.lang.core.psi.JrnElementType"
  tokenTypeClass="com.qalens.corr.lang.core.psi.JrnTokenType"

  psiImplUtilClass="com.qalens.corr.lang.core.psi.impl.JourneyPsiImplUtil"
  tokens = [
          DOT = '.'
          SCRIPLET_START = '<%'
          SCRIPLET_END = '%>'
          LBRACE      = '{'
          RBRACE      = '}'
          LBRACK      =  '['
          RBRACK      =  ']'
          LPAREN      =  '('
          RPAREN      =  ')'
          COLON       =  ':'
          SEMICOLON   =  ';'
          COMMA       =  ','
          BACKTICK    =  '`'
          UNDERSCORE  =  '_'
          QUOTE      =  '"'
          ASSIGN     =  '='
          STRING      = 'String'
          BOOL      = 'Boolean'
          DOUBLE    = 'Double'
          POSITIVE_INTEGER = 'PositiveInteger'
          INTEGER = 'Integer'
          LIST      = 'List'
          OBJECT      = 'Object'
          CONCAT = 'concat'
          FROMJSON = 'from_json'
          MUL = 'mul'
          DIV = 'div'
          ADD = 'add'
          SUB = 'sub'
          FAKE = 'fake'
          UUID = 'uuid'
          RANDOM = 'random'
          ROUND = 'round'
          PRINT  = 'print'
          TEXT = 'text'
          FOR = 'for'
          LET = 'let'
          MATCHING = 'matching'
          BODY = 'body'
          HEADERS = 'headers'
          REQUEST = 'request'
          AND = 'and'
          OBJECT_TEMPLATE = 'object'
          URL = 'url'
          GET = 'get'
          PUT = 'put'
          POST = 'post'
          PATCH = 'patch'
          DELETE = 'delete'
          FATARROW = '=>'

      ]
}
journeyFile ::= RootFn
RootFn ::= JourneyName '(' ')' '{' Statement* '}'
JourneyName ::= identifier | NAME
Statement ::= PrintStatement | ForStatement | LetStatement | RestStep
LetStatement ::= 'let' VariableReference '=' Assignable
LetMatchingStatement ::= 'let' 'matching' ExtractableStatement
RestStep ::= ( 'get' | 'put' | 'post' | 'patch' | 'delete') FillableRequestTemplate ( 'matching' (HeadersStartingResponse | BodyStartingResponse))?
HeadersStartingResponse ::= 'headers' ExtractableHeaders ('and' 'body' ExtractableTemplate)?
BodyStartingResponse ::=   'body' ExtractableTemplate ('and' 'headers' ExtractableHeaders)?
ExtractableTemplate ::= ('object' ExtractableObjectTemplate)
ExtractableObjectTemplate ::= VariableReference | ExtractableObjectMap | ExtractableStaticArray
ExtractableObjectMap ::= '{' ExtractablePair ( ',' ExtractablePair)* '}'
ExtractableStaticArray ::= '[' ExtractableObjectTemplate (',' ExtractableObjectTemplate)* ']'
ExtractablePair ::= STRING_LITERAL ':' ExtractableObjectTemplate

ExtractableHeaders ::= '{' STRING_LITERAL ':' VariableReference (',' STRING_LITERAL ':' VariableReference)* '}'
FillableRequestTemplate ::= 'request' '{'
  'url' ':' (Expression | FillableTextTemplate)
  ( ',' 'body' ':' FillableObjectTemplate)?
  ( ',' 'headers' ':' FillableHeaders)? '}'
FillableHeaders ::= '{' HeaderPair (',' HeaderPair)* '}'
HeaderPair ::= STRING_LITERAL ':' FillableTextTemplate
Assignable ::= Expression | FillableObjectTemplate | FillableTextTemplate
FillableObjectTemplate ::= 'object' ObjectValueTemplate
ObjectValueTemplate ::= Expression | FillableMapTemplate | FillableArrayTemplate
FillableMapTemplate ::= '{'  (FillbaleObjectPair (',' FillbaleObjectPair)*)? '}'
FillbaleObjectPair ::= STRING_LITERAL ':' ObjectValueTemplate
FillableArrayTemplate ::= '[' (ObjectValueTemplate (',' ObjectValueTemplate)*)? ']'
PrintStatement ::= 'print' FillableTextTemplate
ForStatement ::= VariableReference '.' 'for' ( UnArgedFor | ArgedFor)
UnArgedFor ::= Statement | MultipleStatement
ArgedFor ::= '(' ( (VariableReference ',' VariableReference) | VariableReference?) ')' '=>' (Statement | MultipleStatement)
MultipleStatement ::= '{' (Statement)* '}'
FillableTextTemplate ::= 'text' TextTemplate
TextTemplate ::= '`' TextBlock* '`'
TextBlock ::= Scriplet | TEXT_LITERAL
Scriplet ::= '<%' (TextScript) '%>'
TextScript ::= ForLoopInText | Expression
ForLoopInText ::= VariableReference '.' 'for' (UnArgedForInText | ArgedForInText )
UnArgedForInText ::= ForBlockForText
ForBlockForText ::= TextScript | ( '%>' (TextBlock)* '<%' )
ArgedForInText ::= '(' ( (VariableReference ',' VariableReference) | VariableReference?) ')' '=>' ForBlockForText
Expression ::= ConstantExpression | FunctionExpression | VariableExpression
ConstantExpression ::= STRING_LITERAL | DoubleValue | PositiveIntegerValue | InetegerValue | NullValue | BooleanValue
FunctionExpression ::= MultiValuedFunction | BinaryFunction | UnaryFunction | NoArgFunction
MultiValuedFunction ::= ('concat' | 'mul' | 'add') '(' (Expression (',' Expression)*)? ')'
BinaryFunction ::= ('round' | 'random' | 'sub' | 'div') '(' (Expression ',' Expression)  ')'
UnaryFunction ::= ('fake' | 'from_json' ) '(' Expression  ')'
NoArgFunction ::= UUID '('  ')'
VariableExpression ::= VariableReference (':' Type)?
VariableReference ::= identifier ('.' identifier)*
Type ::= ('String' | 'Boolean' | 'PositiveInteger' | 'integer' | 'double')
